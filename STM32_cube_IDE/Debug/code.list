
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002a08  08002a08  00012a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a2c  08002a2c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002a2c  08002a2c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a2c  08002a2c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a2c  08002a2c  00012a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a30  08002a30  00012a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000014  08002a48  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002a48  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c25  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e22  00000000  00000000  00029c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0002ba88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  0002c598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002159  00000000  00000000  0002cf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d20b  00000000  00000000  0002f0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008285c  00000000  00000000  0003c2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000beb40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ac4  00000000  00000000  000beb94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	080029f0 	.word	0x080029f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	080029f0 	.word	0x080029f0

0800014c <init_state_button>:
bool ButtonFlagBuffer[MAX_BUTTON];

int TimeOutForKeyPressBuffer[MAX_BUTTON];

void init_state_button()
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < MAX_BUTTON ; i++)
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e020      	b.n	800019a <init_state_button+0x4e>
	{
		KeyReg0Buffer [i] = NORMAL_STATE;
 8000158:	4a14      	ldr	r2, [pc, #80]	; (80001ac <init_state_button+0x60>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	2201      	movs	r2, #1
 8000160:	701a      	strb	r2, [r3, #0]
		KeyReg1Buffer [i] = NORMAL_STATE;
 8000162:	4a13      	ldr	r2, [pc, #76]	; (80001b0 <init_state_button+0x64>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	4413      	add	r3, r2
 8000168:	2201      	movs	r2, #1
 800016a:	701a      	strb	r2, [r3, #0]
		KeyReg2Buffer [i] = NORMAL_STATE;
 800016c:	4a11      	ldr	r2, [pc, #68]	; (80001b4 <init_state_button+0x68>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	4413      	add	r3, r2
 8000172:	2201      	movs	r2, #1
 8000174:	701a      	strb	r2, [r3, #0]
		KeyReg3Buffer [i] = NORMAL_STATE;
 8000176:	4a10      	ldr	r2, [pc, #64]	; (80001b8 <init_state_button+0x6c>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	4413      	add	r3, r2
 800017c:	2201      	movs	r2, #1
 800017e:	701a      	strb	r2, [r3, #0]

		ButtonFlagBuffer [i] = 0;
 8000180:	4a0e      	ldr	r2, [pc, #56]	; (80001bc <init_state_button+0x70>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4413      	add	r3, r2
 8000186:	2200      	movs	r2, #0
 8000188:	701a      	strb	r2, [r3, #0]

		TimeOutForKeyPressBuffer[i] = TimeForLongPress/TICK;
 800018a:	4a0d      	ldr	r2, [pc, #52]	; (80001c0 <init_state_button+0x74>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2132      	movs	r1, #50	; 0x32
 8000190:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0 ; i < MAX_BUTTON ; i++)
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	3301      	adds	r3, #1
 8000198:	607b      	str	r3, [r7, #4]
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b02      	cmp	r3, #2
 800019e:	dddb      	ble.n	8000158 <init_state_button+0xc>
	}
}
 80001a0:	bf00      	nop
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	20000090 	.word	0x20000090
 80001b0:	20000094 	.word	0x20000094
 80001b4:	2000007c 	.word	0x2000007c
 80001b8:	20000080 	.word	0x20000080
 80001bc:	20000098 	.word	0x20000098
 80001c0:	20000084 	.word	0x20000084

080001c4 <getButtonFlagAtIndex>:

bool getButtonFlagAtIndex(int index)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
	if(index >= MAX_BUTTON)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b02      	cmp	r3, #2
 80001d0:	dd01      	ble.n	80001d6 <getButtonFlagAtIndex+0x12>
		return 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	e003      	b.n	80001de <getButtonFlagAtIndex+0x1a>

	return ButtonFlagBuffer[index];
 80001d6:	4a04      	ldr	r2, [pc, #16]	; (80001e8 <getButtonFlagAtIndex+0x24>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4413      	add	r3, r2
 80001dc:	781b      	ldrb	r3, [r3, #0]
}
 80001de:	4618      	mov	r0, r3
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr
 80001e8:	20000098 	.word	0x20000098

080001ec <ResetButtonFlagAtIndex>:

void ResetButtonFlagAtIndex(int index)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	if(index >= MAX_BUTTON)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2b02      	cmp	r3, #2
 80001f8:	dc05      	bgt.n	8000206 <ResetButtonFlagAtIndex+0x1a>
		return;

	ButtonFlagBuffer[index] = 0;
 80001fa:	4a05      	ldr	r2, [pc, #20]	; (8000210 <ResetButtonFlagAtIndex+0x24>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4413      	add	r3, r2
 8000200:	2200      	movs	r2, #0
 8000202:	701a      	strb	r2, [r3, #0]
 8000204:	e000      	b.n	8000208 <ResetButtonFlagAtIndex+0x1c>
		return;
 8000206:	bf00      	nop
}
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr
 8000210:	20000098 	.word	0x20000098

08000214 <getKeyInput>:

void getKeyInput()
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < MAX_BUTTON ; i++)
 800021a:	2300      	movs	r3, #0
 800021c:	60fb      	str	r3, [r7, #12]
 800021e:	e014      	b.n	800024a <getKeyInput+0x36>
	{
		KeyReg2Buffer [i] = KeyReg1Buffer [i];
 8000220:	4a51      	ldr	r2, [pc, #324]	; (8000368 <getKeyInput+0x154>)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	4413      	add	r3, r2
 8000226:	7819      	ldrb	r1, [r3, #0]
 8000228:	4a50      	ldr	r2, [pc, #320]	; (800036c <getKeyInput+0x158>)
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	4413      	add	r3, r2
 800022e:	460a      	mov	r2, r1
 8000230:	701a      	strb	r2, [r3, #0]
		KeyReg1Buffer [i] = KeyReg0Buffer [i];
 8000232:	4a4f      	ldr	r2, [pc, #316]	; (8000370 <getKeyInput+0x15c>)
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	4413      	add	r3, r2
 8000238:	7819      	ldrb	r1, [r3, #0]
 800023a:	4a4b      	ldr	r2, [pc, #300]	; (8000368 <getKeyInput+0x154>)
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	4413      	add	r3, r2
 8000240:	460a      	mov	r2, r1
 8000242:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < MAX_BUTTON ; i++)
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	3301      	adds	r3, #1
 8000248:	60fb      	str	r3, [r7, #12]
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	2b02      	cmp	r3, #2
 800024e:	dde7      	ble.n	8000220 <getKeyInput+0xc>
	}

	KeyReg0Buffer[0] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000250:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000254:	4847      	ldr	r0, [pc, #284]	; (8000374 <getKeyInput+0x160>)
 8000256:	f001 fb9f 	bl	8001998 <HAL_GPIO_ReadPin>
 800025a:	4603      	mov	r3, r0
 800025c:	461a      	mov	r2, r3
 800025e:	4b44      	ldr	r3, [pc, #272]	; (8000370 <getKeyInput+0x15c>)
 8000260:	701a      	strb	r2, [r3, #0]
	KeyReg0Buffer[1] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000262:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000266:	4843      	ldr	r0, [pc, #268]	; (8000374 <getKeyInput+0x160>)
 8000268:	f001 fb96 	bl	8001998 <HAL_GPIO_ReadPin>
 800026c:	4603      	mov	r3, r0
 800026e:	461a      	mov	r2, r3
 8000270:	4b3f      	ldr	r3, [pc, #252]	; (8000370 <getKeyInput+0x15c>)
 8000272:	705a      	strb	r2, [r3, #1]
	KeyReg0Buffer[2] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000274:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000278:	483e      	ldr	r0, [pc, #248]	; (8000374 <getKeyInput+0x160>)
 800027a:	f001 fb8d 	bl	8001998 <HAL_GPIO_ReadPin>
 800027e:	4603      	mov	r3, r0
 8000280:	461a      	mov	r2, r3
 8000282:	4b3b      	ldr	r3, [pc, #236]	; (8000370 <getKeyInput+0x15c>)
 8000284:	709a      	strb	r2, [r3, #2]

	for(int i = 0 ; i < MAX_BUTTON ; i++)
 8000286:	2300      	movs	r3, #0
 8000288:	60bb      	str	r3, [r7, #8]
 800028a:	e064      	b.n	8000356 <getKeyInput+0x142>
	{
		bool temp = KeyReg3Buffer[i];
 800028c:	4a3a      	ldr	r2, [pc, #232]	; (8000378 <getKeyInput+0x164>)
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	4413      	add	r3, r2
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	71fb      	strb	r3, [r7, #7]

		if(KeyReg1Buffer[i] == KeyReg0Buffer[i] && KeyReg1Buffer [i] == KeyReg2Buffer[i]) //same each other
 8000296:	4a34      	ldr	r2, [pc, #208]	; (8000368 <getKeyInput+0x154>)
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	4413      	add	r3, r2
 800029c:	781a      	ldrb	r2, [r3, #0]
 800029e:	4934      	ldr	r1, [pc, #208]	; (8000370 <getKeyInput+0x15c>)
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	440b      	add	r3, r1
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d10e      	bne.n	80002c8 <getKeyInput+0xb4>
 80002aa:	4a2f      	ldr	r2, [pc, #188]	; (8000368 <getKeyInput+0x154>)
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	4413      	add	r3, r2
 80002b0:	781a      	ldrb	r2, [r3, #0]
 80002b2:	492e      	ldr	r1, [pc, #184]	; (800036c <getKeyInput+0x158>)
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	440b      	add	r3, r1
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d104      	bne.n	80002c8 <getKeyInput+0xb4>
			temp = KeyReg2Buffer[i];
 80002be:	4a2b      	ldr	r2, [pc, #172]	; (800036c <getKeyInput+0x158>)
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	4413      	add	r3, r2
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	71fb      	strb	r3, [r7, #7]

		if(KeyReg3Buffer [i] != temp)
 80002c8:	4a2b      	ldr	r2, [pc, #172]	; (8000378 <getKeyInput+0x164>)
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	4413      	add	r3, r2
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	79fa      	ldrb	r2, [r7, #7]
 80002d2:	429a      	cmp	r2, r3
 80002d4:	d005      	beq.n	80002e2 <getKeyInput+0xce>
			KeyReg3Buffer[i] = temp;
 80002d6:	4a28      	ldr	r2, [pc, #160]	; (8000378 <getKeyInput+0x164>)
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	4413      	add	r3, r2
 80002dc:	79fa      	ldrb	r2, [r7, #7]
 80002de:	701a      	strb	r2, [r3, #0]
 80002e0:	e00e      	b.n	8000300 <getKeyInput+0xec>

		//if it is pressed and long pressed we will minus time out and update it as Long Pressed
		//if we use else command we will have a problem when NOT PRESSED state we also minus time out
		//and if it is pressed at time out <  origin Time For Long Press we will determine it as long pressed
		else if(KeyReg3Buffer[i] == (bool)PRESSED_STATE)
 80002e2:	4a25      	ldr	r2, [pc, #148]	; (8000378 <getKeyInput+0x164>)
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	4413      	add	r3, r2
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d108      	bne.n	8000300 <getKeyInput+0xec>
			TimeOutForKeyPressBuffer[i] -= 1;
 80002ee:	4a23      	ldr	r2, [pc, #140]	; (800037c <getKeyInput+0x168>)
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f6:	1e5a      	subs	r2, r3, #1
 80002f8:	4920      	ldr	r1, [pc, #128]	; (800037c <getKeyInput+0x168>)
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//if it is pressed but TimeOutForKeyPressBuffer larger on or equal to origin Time For Long Press we will define it as pressed one time
		if(KeyReg3Buffer[i] == (bool)PRESSED_STATE && TimeOutForKeyPressBuffer[i] >= TimeForLongPress/TICK)
 8000300:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <getKeyInput+0x164>)
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	4413      	add	r3, r2
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d10b      	bne.n	8000324 <getKeyInput+0x110>
 800030c:	4a1b      	ldr	r2, [pc, #108]	; (800037c <getKeyInput+0x168>)
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000314:	2b31      	cmp	r3, #49	; 0x31
 8000316:	dd05      	ble.n	8000324 <getKeyInput+0x110>
		{
			ButtonFlagBuffer[i] = 1;
 8000318:	4a19      	ldr	r2, [pc, #100]	; (8000380 <getKeyInput+0x16c>)
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	4413      	add	r3, r2
 800031e:	2201      	movs	r2, #1
 8000320:	701a      	strb	r2, [r3, #0]
 8000322:	e015      	b.n	8000350 <getKeyInput+0x13c>
		}

		//if it is pressed and TimeOutForKeyPressBuffer equal to zero we will define it as long pressed
		else if(KeyReg3Buffer[i] == (bool)PRESSED_STATE && TimeOutForKeyPressBuffer[i] <= 0)
 8000324:	4a14      	ldr	r2, [pc, #80]	; (8000378 <getKeyInput+0x164>)
 8000326:	68bb      	ldr	r3, [r7, #8]
 8000328:	4413      	add	r3, r2
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d10f      	bne.n	8000350 <getKeyInput+0x13c>
 8000330:	4a12      	ldr	r2, [pc, #72]	; (800037c <getKeyInput+0x168>)
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000338:	2b00      	cmp	r3, #0
 800033a:	dc09      	bgt.n	8000350 <getKeyInput+0x13c>
		{
			ButtonFlagBuffer[i] = 1;
 800033c:	4a10      	ldr	r2, [pc, #64]	; (8000380 <getKeyInput+0x16c>)
 800033e:	68bb      	ldr	r3, [r7, #8]
 8000340:	4413      	add	r3, r2
 8000342:	2201      	movs	r2, #1
 8000344:	701a      	strb	r2, [r3, #0]
			TimeOutForKeyPressBuffer[i] = TimeForLongPress/TICK;
 8000346:	4a0d      	ldr	r2, [pc, #52]	; (800037c <getKeyInput+0x168>)
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	2132      	movs	r1, #50	; 0x32
 800034c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0 ; i < MAX_BUTTON ; i++)
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	3301      	adds	r3, #1
 8000354:	60bb      	str	r3, [r7, #8]
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	2b02      	cmp	r3, #2
 800035a:	dd97      	ble.n	800028c <getKeyInput+0x78>
//		        	}
//		        }
//		    }
//		  }
	}
}
 800035c:	bf00      	nop
 800035e:	bf00      	nop
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000094 	.word	0x20000094
 800036c:	2000007c 	.word	0x2000007c
 8000370:	20000090 	.word	0x20000090
 8000374:	40010c00 	.word	0x40010c00
 8000378:	20000080 	.word	0x20000080
 800037c:	20000084 	.word	0x20000084
 8000380:	20000098 	.word	0x20000098

08000384 <fsm_automatic>:
 *  Created on: Oct 28, 2024
 *      Author: 84898
 */
#include "global.h"
void fsm_automatic()
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
		if(TimeForRed != TimeForAmber + TimeForGreen + 1)
 8000388:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <fsm_automatic+0x40>)
 800038a:	681a      	ldr	r2, [r3, #0]
 800038c:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <fsm_automatic+0x44>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4413      	add	r3, r2
 8000392:	1c5a      	adds	r2, r3, #1
 8000394:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <fsm_automatic+0x48>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	429a      	cmp	r2, r3
 800039a:	d008      	beq.n	80003ae <fsm_automatic+0x2a>
		{
			TimeForAmber = 0;
 800039c:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <fsm_automatic+0x40>)
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
			TimeForRed = 0;
 80003a2:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <fsm_automatic+0x48>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
			TimeForGreen = 0;
 80003a8:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <fsm_automatic+0x44>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
		}

		if(Onepass)
 80003ae:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <fsm_automatic+0x4c>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <fsm_automatic+0x36>
		UpdateTimeDecrease();
 80003b6:	f000 fe55 	bl	8001064 <UpdateTimeDecrease>

		traffic_light();
 80003ba:	f000 ff47 	bl	800124c <traffic_light>
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	20000060 	.word	0x20000060
 80003c8:	20000064 	.word	0x20000064
 80003cc:	2000005c 	.word	0x2000005c
 80003d0:	20000078 	.word	0x20000078

080003d4 <updateTempsForFSMManual>:
int tempMode3 = 0;

int tempMode4 = 0;

void updateTempsForFSMManual()
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
	tempMode2 = TimeForRed;
 80003d8:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <updateTempsForFSMManual+0x24>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a07      	ldr	r2, [pc, #28]	; (80003fc <updateTempsForFSMManual+0x28>)
 80003de:	6013      	str	r3, [r2, #0]

	tempMode3 = TimeForAmber;
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <updateTempsForFSMManual+0x2c>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a07      	ldr	r2, [pc, #28]	; (8000404 <updateTempsForFSMManual+0x30>)
 80003e6:	6013      	str	r3, [r2, #0]

	tempMode4 = TimeForGreen;
 80003e8:	4b07      	ldr	r3, [pc, #28]	; (8000408 <updateTempsForFSMManual+0x34>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a07      	ldr	r2, [pc, #28]	; (800040c <updateTempsForFSMManual+0x38>)
 80003ee:	6013      	str	r3, [r2, #0]
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr
 80003f8:	2000005c 	.word	0x2000005c
 80003fc:	20000034 	.word	0x20000034
 8000400:	20000060 	.word	0x20000060
 8000404:	20000038 	.word	0x20000038
 8000408:	20000064 	.word	0x20000064
 800040c:	2000003c 	.word	0x2000003c

08000410 <mode2>:

void mode2() //set duration for RED LEDs
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	update7SegBufferForOdd(02); //display mode number
 8000414:	2002      	movs	r0, #2
 8000416:	f000 fddd 	bl	8000fd4 <update7SegBufferForOdd>

	if(IsOneSecondPassed())
 800041a:	f000 fd01 	bl	8000e20 <IsOneSecondPassed>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d00b      	beq.n	800043c <mode2+0x2c>
	{
		FlagToggle = !FlagToggle;
 8000424:	4b23      	ldr	r3, [pc, #140]	; (80004b4 <mode2+0xa4>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	bf0c      	ite	eq
 800042c:	2301      	moveq	r3, #1
 800042e:	2300      	movne	r3, #0
 8000430:	b2db      	uxtb	r3, r3
 8000432:	461a      	mov	r2, r3
 8000434:	4b1f      	ldr	r3, [pc, #124]	; (80004b4 <mode2+0xa4>)
 8000436:	701a      	strb	r2, [r3, #0]
		clearOneSecondFlag();
 8000438:	f000 fcfc 	bl	8000e34 <clearOneSecondFlag>
	}

	if(FlagToggle)
 800043c:	4b1d      	ldr	r3, [pc, #116]	; (80004b4 <mode2+0xa4>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d004      	beq.n	800044e <mode2+0x3e>
	{
		turnOnLedRedForOdd();
 8000444:	f000 fe5e 	bl	8001104 <turnOnLedRedForOdd>
		turnOnLedRedForEven();
 8000448:	f000 fe4a 	bl	80010e0 <turnOnLedRedForEven>
 800044c:	e001      	b.n	8000452 <mode2+0x42>
	}

	else
	{
		clearAllLed();
 800044e:	f000 feb3 	bl	80011b8 <clearAllLed>
	}

	if(getButtonFlagAtIndex(1)) //button 2 is pressed
 8000452:	2001      	movs	r0, #1
 8000454:	f7ff feb6 	bl	80001c4 <getButtonFlagAtIndex>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d01a      	beq.n	8000494 <mode2+0x84>
	{
		tempMode2++;
 800045e:	4b16      	ldr	r3, [pc, #88]	; (80004b8 <mode2+0xa8>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	3301      	adds	r3, #1
 8000464:	4a14      	ldr	r2, [pc, #80]	; (80004b8 <mode2+0xa8>)
 8000466:	6013      	str	r3, [r2, #0]
		tempMode2 = tempMode2 % 100; //Max 99
 8000468:	4b13      	ldr	r3, [pc, #76]	; (80004b8 <mode2+0xa8>)
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	4b13      	ldr	r3, [pc, #76]	; (80004bc <mode2+0xac>)
 800046e:	fb83 1302 	smull	r1, r3, r3, r2
 8000472:	1159      	asrs	r1, r3, #5
 8000474:	17d3      	asrs	r3, r2, #31
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	2164      	movs	r1, #100	; 0x64
 800047a:	fb01 f303 	mul.w	r3, r1, r3
 800047e:	1ad3      	subs	r3, r2, r3
 8000480:	4a0d      	ldr	r2, [pc, #52]	; (80004b8 <mode2+0xa8>)
 8000482:	6013      	str	r3, [r2, #0]

		update7SegBufferForEven(tempMode2); //display duration set
 8000484:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <mode2+0xa8>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4618      	mov	r0, r3
 800048a:	f000 fdc7 	bl	800101c <update7SegBufferForEven>

		ResetButtonFlagAtIndex(1);
 800048e:	2001      	movs	r0, #1
 8000490:	f7ff feac 	bl	80001ec <ResetButtonFlagAtIndex>
	}

	if(getButtonFlagAtIndex(2)) //button 3 is pressed
 8000494:	2002      	movs	r0, #2
 8000496:	f7ff fe95 	bl	80001c4 <getButtonFlagAtIndex>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d006      	beq.n	80004ae <mode2+0x9e>
	{
		TimeForRed = tempMode2;
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <mode2+0xa8>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a06      	ldr	r2, [pc, #24]	; (80004c0 <mode2+0xb0>)
 80004a6:	6013      	str	r3, [r2, #0]

		ResetButtonFlagAtIndex(2);
 80004a8:	2002      	movs	r0, #2
 80004aa:	f7ff fe9f 	bl	80001ec <ResetButtonFlagAtIndex>
	}
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20000030 	.word	0x20000030
 80004b8:	20000034 	.word	0x20000034
 80004bc:	51eb851f 	.word	0x51eb851f
 80004c0:	2000005c 	.word	0x2000005c

080004c4 <mode3>:

void mode3() //set Duration for Amber Leds
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	update7SegBufferForOdd(03); //display mode number
 80004c8:	2003      	movs	r0, #3
 80004ca:	f000 fd83 	bl	8000fd4 <update7SegBufferForOdd>

	if(IsOneSecondPassed())
 80004ce:	f000 fca7 	bl	8000e20 <IsOneSecondPassed>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d00b      	beq.n	80004f0 <mode3+0x2c>
	{
		FlagToggle = !FlagToggle;
 80004d8:	4b26      	ldr	r3, [pc, #152]	; (8000574 <mode3+0xb0>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	bf0c      	ite	eq
 80004e0:	2301      	moveq	r3, #1
 80004e2:	2300      	movne	r3, #0
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	461a      	mov	r2, r3
 80004e8:	4b22      	ldr	r3, [pc, #136]	; (8000574 <mode3+0xb0>)
 80004ea:	701a      	strb	r2, [r3, #0]
		clearOneSecondFlag();
 80004ec:	f000 fca2 	bl	8000e34 <clearOneSecondFlag>
	}

	if(FlagToggle)
 80004f0:	4b20      	ldr	r3, [pc, #128]	; (8000574 <mode3+0xb0>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d004      	beq.n	8000502 <mode3+0x3e>
	{
		turnOnLedAmberForOdd();
 80004f8:	f000 fe28 	bl	800114c <turnOnLedAmberForOdd>
		turnOnLedAmberForEven();
 80004fc:	f000 fe14 	bl	8001128 <turnOnLedAmberForEven>
 8000500:	e001      	b.n	8000506 <mode3+0x42>
	}

	else
	{
		clearAllLed();
 8000502:	f000 fe59 	bl	80011b8 <clearAllLed>
	}

	if(getButtonFlagAtIndex(1)) //button 2 is pressed And don't exceed time Red leds
 8000506:	2001      	movs	r0, #1
 8000508:	f7ff fe5c 	bl	80001c4 <getButtonFlagAtIndex>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d01a      	beq.n	8000548 <mode3+0x84>
	{
		tempMode3++;
 8000512:	4b19      	ldr	r3, [pc, #100]	; (8000578 <mode3+0xb4>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	3301      	adds	r3, #1
 8000518:	4a17      	ldr	r2, [pc, #92]	; (8000578 <mode3+0xb4>)
 800051a:	6013      	str	r3, [r2, #0]
		tempMode3 = tempMode3 % 100; //Max 99
 800051c:	4b16      	ldr	r3, [pc, #88]	; (8000578 <mode3+0xb4>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	4b16      	ldr	r3, [pc, #88]	; (800057c <mode3+0xb8>)
 8000522:	fb83 1302 	smull	r1, r3, r3, r2
 8000526:	1159      	asrs	r1, r3, #5
 8000528:	17d3      	asrs	r3, r2, #31
 800052a:	1acb      	subs	r3, r1, r3
 800052c:	2164      	movs	r1, #100	; 0x64
 800052e:	fb01 f303 	mul.w	r3, r1, r3
 8000532:	1ad3      	subs	r3, r2, r3
 8000534:	4a10      	ldr	r2, [pc, #64]	; (8000578 <mode3+0xb4>)
 8000536:	6013      	str	r3, [r2, #0]
		update7SegBufferForEven(tempMode3); //display duration set
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <mode3+0xb4>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	f000 fd6d 	bl	800101c <update7SegBufferForEven>
		ResetButtonFlagAtIndex(1);
 8000542:	2001      	movs	r0, #1
 8000544:	f7ff fe52 	bl	80001ec <ResetButtonFlagAtIndex>
	}

	if(getButtonFlagAtIndex(2)) //button 3 is pressed
 8000548:	2002      	movs	r0, #2
 800054a:	f7ff fe3b 	bl	80001c4 <getButtonFlagAtIndex>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d00c      	beq.n	800056e <mode3+0xaa>
	{
		if(tempMode3 < TimeForRed)
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <mode3+0xb4>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b09      	ldr	r3, [pc, #36]	; (8000580 <mode3+0xbc>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	429a      	cmp	r2, r3
 800055e:	da03      	bge.n	8000568 <mode3+0xa4>
			TimeForAmber = tempMode3;
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <mode3+0xb4>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <mode3+0xc0>)
 8000566:	6013      	str	r3, [r2, #0]

//		TimeForGreen = TimeForRed - TimeForAmber - 1; //reassign Time for Green Leds

		ResetButtonFlagAtIndex(2);
 8000568:	2002      	movs	r0, #2
 800056a:	f7ff fe3f 	bl	80001ec <ResetButtonFlagAtIndex>
	}
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000030 	.word	0x20000030
 8000578:	20000038 	.word	0x20000038
 800057c:	51eb851f 	.word	0x51eb851f
 8000580:	2000005c 	.word	0x2000005c
 8000584:	20000060 	.word	0x20000060

08000588 <mode4>:

void mode4()
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	update7SegBufferForOdd(04); //display mode number
 800058c:	2004      	movs	r0, #4
 800058e:	f000 fd21 	bl	8000fd4 <update7SegBufferForOdd>

	if(IsOneSecondPassed())
 8000592:	f000 fc45 	bl	8000e20 <IsOneSecondPassed>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00b      	beq.n	80005b4 <mode4+0x2c>
	{
		FlagToggle = !FlagToggle;
 800059c:	4b28      	ldr	r3, [pc, #160]	; (8000640 <mode4+0xb8>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	bf0c      	ite	eq
 80005a4:	2301      	moveq	r3, #1
 80005a6:	2300      	movne	r3, #0
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	461a      	mov	r2, r3
 80005ac:	4b24      	ldr	r3, [pc, #144]	; (8000640 <mode4+0xb8>)
 80005ae:	701a      	strb	r2, [r3, #0]
		clearOneSecondFlag();
 80005b0:	f000 fc40 	bl	8000e34 <clearOneSecondFlag>
	}

	if(FlagToggle)
 80005b4:	4b22      	ldr	r3, [pc, #136]	; (8000640 <mode4+0xb8>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d004      	beq.n	80005c6 <mode4+0x3e>
	{
		turnOnLedGreenForOdd();
 80005bc:	f000 fdea 	bl	8001194 <turnOnLedGreenForOdd>
		turnOnLedGreenForEven();
 80005c0:	f000 fdd6 	bl	8001170 <turnOnLedGreenForEven>
 80005c4:	e001      	b.n	80005ca <mode4+0x42>
	}

	else
	{
		clearAllLed();
 80005c6:	f000 fdf7 	bl	80011b8 <clearAllLed>
	}

	if(getButtonFlagAtIndex(1)) //button 2 is pressed And don't exceed time Red leds
 80005ca:	2001      	movs	r0, #1
 80005cc:	f7ff fdfa 	bl	80001c4 <getButtonFlagAtIndex>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d01a      	beq.n	800060c <mode4+0x84>
	{
		tempMode4++;
 80005d6:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <mode4+0xbc>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	3301      	adds	r3, #1
 80005dc:	4a19      	ldr	r2, [pc, #100]	; (8000644 <mode4+0xbc>)
 80005de:	6013      	str	r3, [r2, #0]
		tempMode4 = tempMode4 % 100; //Max 99
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <mode4+0xbc>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b18      	ldr	r3, [pc, #96]	; (8000648 <mode4+0xc0>)
 80005e6:	fb83 1302 	smull	r1, r3, r3, r2
 80005ea:	1159      	asrs	r1, r3, #5
 80005ec:	17d3      	asrs	r3, r2, #31
 80005ee:	1acb      	subs	r3, r1, r3
 80005f0:	2164      	movs	r1, #100	; 0x64
 80005f2:	fb01 f303 	mul.w	r3, r1, r3
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	4a12      	ldr	r2, [pc, #72]	; (8000644 <mode4+0xbc>)
 80005fa:	6013      	str	r3, [r2, #0]
		update7SegBufferForEven(tempMode4); //display duration set
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <mode4+0xbc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fd0b 	bl	800101c <update7SegBufferForEven>

		ResetButtonFlagAtIndex(1);
 8000606:	2001      	movs	r0, #1
 8000608:	f7ff fdf0 	bl	80001ec <ResetButtonFlagAtIndex>
	}

	if(getButtonFlagAtIndex(2)) //button 3 is pressed
 800060c:	2002      	movs	r0, #2
 800060e:	f7ff fdd9 	bl	80001c4 <getButtonFlagAtIndex>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d010      	beq.n	800063a <mode4+0xb2>
	{
		if(tempMode4 <= TimeForRed - TimeForAmber)
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <mode4+0xc4>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <mode4+0xc8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	1ad2      	subs	r2, r2, r3
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <mode4+0xbc>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	429a      	cmp	r2, r3
 8000628:	db04      	blt.n	8000634 <mode4+0xac>
			TimeForGreen = tempMode4 - 1;
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <mode4+0xbc>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	3b01      	subs	r3, #1
 8000630:	4a08      	ldr	r2, [pc, #32]	; (8000654 <mode4+0xcc>)
 8000632:	6013      	str	r3, [r2, #0]

//		TimeForAmber = TimeForRed - TimeForGreen - 1; //reassign Time for Amber Leds

		ResetButtonFlagAtIndex(2);
 8000634:	2002      	movs	r0, #2
 8000636:	f7ff fdd9 	bl	80001ec <ResetButtonFlagAtIndex>
	}
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000030 	.word	0x20000030
 8000644:	2000003c 	.word	0x2000003c
 8000648:	51eb851f 	.word	0x51eb851f
 800064c:	2000005c 	.word	0x2000005c
 8000650:	20000060 	.word	0x20000060
 8000654:	20000064 	.word	0x20000064

08000658 <fsm_manual>:

void fsm_manual()
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	switch (getCurrentMode())
 800065c:	f000 f830 	bl	80006c0 <getCurrentMode>
 8000660:	4603      	mov	r3, r0
 8000662:	2b03      	cmp	r3, #3
 8000664:	d016      	beq.n	8000694 <fsm_manual+0x3c>
 8000666:	2b03      	cmp	r3, #3
 8000668:	dc1f      	bgt.n	80006aa <fsm_manual+0x52>
 800066a:	2b01      	cmp	r3, #1
 800066c:	d002      	beq.n	8000674 <fsm_manual+0x1c>
 800066e:	2b02      	cmp	r3, #2
 8000670:	d008      	beq.n	8000684 <fsm_manual+0x2c>
			update7SegBufferForEven(tempMode4);
			mode4();
			Onepass = 1;
			break;
		default:
			break;
 8000672:	e01a      	b.n	80006aa <fsm_manual+0x52>
			update7SegBufferForEven(tempMode2);
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <fsm_manual+0x58>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fccf 	bl	800101c <update7SegBufferForEven>
			mode2();
 800067e:	f7ff fec7 	bl	8000410 <mode2>
			break;
 8000682:	e013      	b.n	80006ac <fsm_manual+0x54>
			update7SegBufferForEven(tempMode3);
 8000684:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <fsm_manual+0x5c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fcc7 	bl	800101c <update7SegBufferForEven>
			mode3();
 800068e:	f7ff ff19 	bl	80004c4 <mode3>
			break;
 8000692:	e00b      	b.n	80006ac <fsm_manual+0x54>
			update7SegBufferForEven(tempMode4);
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <fsm_manual+0x60>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fcbf 	bl	800101c <update7SegBufferForEven>
			mode4();
 800069e:	f7ff ff73 	bl	8000588 <mode4>
			Onepass = 1;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <fsm_manual+0x64>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	701a      	strb	r2, [r3, #0]
			break;
 80006a8:	e000      	b.n	80006ac <fsm_manual+0x54>
			break;
 80006aa:	bf00      	nop
	}

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000034 	.word	0x20000034
 80006b4:	20000038 	.word	0x20000038
 80006b8:	2000003c 	.word	0x2000003c
 80006bc:	20000078 	.word	0x20000078

080006c0 <getCurrentMode>:
{
	current_mode = CurrentMode;
}

int getCurrentMode()
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
	return current_mode;
 80006c4:	4b02      	ldr	r3, [pc, #8]	; (80006d0 <getCurrentMode+0x10>)
 80006c6:	681b      	ldr	r3, [r3, #0]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	20000040 	.word	0x20000040

080006d4 <fsm_setting>:

void fsm_setting()
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	if(getButtonFlagAtIndex(0))
 80006d8:	2000      	movs	r0, #0
 80006da:	f7ff fd73 	bl	80001c4 <getButtonFlagAtIndex>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d014      	beq.n	800070e <fsm_setting+0x3a>
	{
		updateTempsForFSMManual();
 80006e4:	f7ff fe76 	bl	80003d4 <updateTempsForFSMManual>
		current_mode ++;
 80006e8:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <fsm_setting+0x50>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <fsm_setting+0x50>)
 80006f0:	6013      	str	r3, [r2, #0]
		current_mode = current_mode % 4;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <fsm_setting+0x50>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	425a      	negs	r2, r3
 80006f8:	f003 0303 	and.w	r3, r3, #3
 80006fc:	f002 0203 	and.w	r2, r2, #3
 8000700:	bf58      	it	pl
 8000702:	4253      	negpl	r3, r2
 8000704:	4a07      	ldr	r2, [pc, #28]	; (8000724 <fsm_setting+0x50>)
 8000706:	6013      	str	r3, [r2, #0]
		ResetButtonFlagAtIndex(0);
 8000708:	2000      	movs	r0, #0
 800070a:	f7ff fd6f 	bl	80001ec <ResetButtonFlagAtIndex>
	}

	if(current_mode == 0)
 800070e:	4b05      	ldr	r3, [pc, #20]	; (8000724 <fsm_setting+0x50>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d102      	bne.n	800071c <fsm_setting+0x48>
		fsm_automatic();
 8000716:	f7ff fe35 	bl	8000384 <fsm_automatic>

	else
		fsm_manual();
}
 800071a:	e001      	b.n	8000720 <fsm_setting+0x4c>
		fsm_manual();
 800071c:	f7ff ff9c 	bl	8000658 <fsm_manual>
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000040 	.word	0x20000040

08000728 <blink_led>:

int counter_blinkLed = TIME_BLINK/TICK;


void blink_led()
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	counter_blinkLed--;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <blink_led+0x2c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	3b01      	subs	r3, #1
 8000732:	4a08      	ldr	r2, [pc, #32]	; (8000754 <blink_led+0x2c>)
 8000734:	6013      	str	r3, [r2, #0]

	if(counter_blinkLed <= 0)
 8000736:	4b07      	ldr	r3, [pc, #28]	; (8000754 <blink_led+0x2c>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	dc08      	bgt.n	8000750 <blink_led+0x28>
	{
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800073e:	2120      	movs	r1, #32
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <blink_led+0x30>)
 8000742:	f001 f958 	bl	80019f6 <HAL_GPIO_TogglePin>
		clearOneSecondFlag();
 8000746:	f000 fb75 	bl	8000e34 <clearOneSecondFlag>
		counter_blinkLed = TIME_BLINK/TICK;
 800074a:	4b02      	ldr	r3, [pc, #8]	; (8000754 <blink_led+0x2c>)
 800074c:	2264      	movs	r2, #100	; 0x64
 800074e:	601a      	str	r2, [r3, #0]
	}
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000000 	.word	0x20000000
 8000758:	40010800 	.word	0x40010800

0800075c <Set7SegBufferAtIndex>:
#include "global.h"

int led_buffer[MAX_LED] = {0, 0, 0, 0};

void Set7SegBufferAtIndex(int index, int value)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
	if(index >= MAX_LED)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2b03      	cmp	r3, #3
 800076a:	dc05      	bgt.n	8000778 <Set7SegBufferAtIndex+0x1c>
	{
		return;
	}

	led_buffer [index] = value;
 800076c:	4905      	ldr	r1, [pc, #20]	; (8000784 <Set7SegBufferAtIndex+0x28>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000776:	e000      	b.n	800077a <Set7SegBufferAtIndex+0x1e>
		return;
 8000778:	bf00      	nop
}
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	20000044 	.word	0x20000044

08000788 <update7SEG>:
	return led_buffer[index];
}


void update7SEG ( int index )
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	if(index >= MAX_LED)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b03      	cmp	r3, #3
 8000794:	dd01      	ble.n	800079a <update7SEG+0x12>
	{
		index = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b03      	cmp	r3, #3
 800079e:	d87f      	bhi.n	80008a0 <update7SEG+0x118>
 80007a0:	a201      	add	r2, pc, #4	; (adr r2, 80007a8 <update7SEG+0x20>)
 80007a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a6:	bf00      	nop
 80007a8:	080007b9 	.word	0x080007b9
 80007ac:	080007f3 	.word	0x080007f3
 80007b0:	0800082d 	.word	0x0800082d
 80007b4:	08000867 	.word	0x08000867

	 switch ( index )
	 {
		 case 0:
		 // Display the first 7 SEG with led_buffer [0]
				HAL_GPIO_WritePin(ANOT_COMMON_1_GPIO_Port, ANOT_COMMON_1_Pin, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2180      	movs	r1, #128	; 0x80
 80007bc:	483b      	ldr	r0, [pc, #236]	; (80008ac <update7SEG+0x124>)
 80007be:	f001 f902 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ANOT_COMMON_2_GPIO_Port, ANOT_COMMON_2_Pin, 1);
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c8:	4838      	ldr	r0, [pc, #224]	; (80008ac <update7SEG+0x124>)
 80007ca:	f001 f8fc 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ANOT_COMMON_3_GPIO_Port, ANOT_COMMON_3_Pin, 1);
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d4:	4835      	ldr	r0, [pc, #212]	; (80008ac <update7SEG+0x124>)
 80007d6:	f001 f8f6 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ANOT_COMMON_4_GPIO_Port, ANOT_COMMON_4_Pin, 1);
 80007da:	2201      	movs	r2, #1
 80007dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007e0:	4832      	ldr	r0, [pc, #200]	; (80008ac <update7SEG+0x124>)
 80007e2:	f001 f8f0 	bl	80019c6 <HAL_GPIO_WritePin>
				display7SEG(led_buffer [0]);
 80007e6:	4b32      	ldr	r3, [pc, #200]	; (80008b0 <update7SEG+0x128>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 f862 	bl	80008b4 <display7SEG>
			 break ;
 80007f0:	e057      	b.n	80008a2 <update7SEG+0x11a>
		 case 1:
		 // Display the second 7 SEG with led_buffer [1]
				HAL_GPIO_WritePin(ANOT_COMMON_1_GPIO_Port, ANOT_COMMON_1_Pin, 1);
 80007f2:	2201      	movs	r2, #1
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	482d      	ldr	r0, [pc, #180]	; (80008ac <update7SEG+0x124>)
 80007f8:	f001 f8e5 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ANOT_COMMON_2_GPIO_Port, ANOT_COMMON_2_Pin, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000802:	482a      	ldr	r0, [pc, #168]	; (80008ac <update7SEG+0x124>)
 8000804:	f001 f8df 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ANOT_COMMON_3_GPIO_Port, ANOT_COMMON_3_Pin, 1);
 8000808:	2201      	movs	r2, #1
 800080a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800080e:	4827      	ldr	r0, [pc, #156]	; (80008ac <update7SEG+0x124>)
 8000810:	f001 f8d9 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ANOT_COMMON_4_GPIO_Port, ANOT_COMMON_4_Pin, 1);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800081a:	4824      	ldr	r0, [pc, #144]	; (80008ac <update7SEG+0x124>)
 800081c:	f001 f8d3 	bl	80019c6 <HAL_GPIO_WritePin>
				display7SEG(led_buffer [1]);
 8000820:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <update7SEG+0x128>)
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	4618      	mov	r0, r3
 8000826:	f000 f845 	bl	80008b4 <display7SEG>
			 break ;
 800082a:	e03a      	b.n	80008a2 <update7SEG+0x11a>
		 case 2:
		 // Display the third 7 SEG with led_buffer [2]
				HAL_GPIO_WritePin(ANOT_COMMON_1_GPIO_Port, ANOT_COMMON_1_Pin, 1);
 800082c:	2201      	movs	r2, #1
 800082e:	2180      	movs	r1, #128	; 0x80
 8000830:	481e      	ldr	r0, [pc, #120]	; (80008ac <update7SEG+0x124>)
 8000832:	f001 f8c8 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ANOT_COMMON_2_GPIO_Port, ANOT_COMMON_2_Pin, 1);
 8000836:	2201      	movs	r2, #1
 8000838:	f44f 7180 	mov.w	r1, #256	; 0x100
 800083c:	481b      	ldr	r0, [pc, #108]	; (80008ac <update7SEG+0x124>)
 800083e:	f001 f8c2 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ANOT_COMMON_3_GPIO_Port, ANOT_COMMON_3_Pin, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000848:	4818      	ldr	r0, [pc, #96]	; (80008ac <update7SEG+0x124>)
 800084a:	f001 f8bc 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ANOT_COMMON_4_GPIO_Port, ANOT_COMMON_4_Pin, 1);
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000854:	4815      	ldr	r0, [pc, #84]	; (80008ac <update7SEG+0x124>)
 8000856:	f001 f8b6 	bl	80019c6 <HAL_GPIO_WritePin>
				display7SEG(led_buffer [2]);
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <update7SEG+0x128>)
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f828 	bl	80008b4 <display7SEG>
			 break ;
 8000864:	e01d      	b.n	80008a2 <update7SEG+0x11a>
		 case 3:
		 // Display the forth 7 SEG with led_buffer [3]
				HAL_GPIO_WritePin(ANOT_COMMON_1_GPIO_Port, ANOT_COMMON_1_Pin, 1);
 8000866:	2201      	movs	r2, #1
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	4810      	ldr	r0, [pc, #64]	; (80008ac <update7SEG+0x124>)
 800086c:	f001 f8ab 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ANOT_COMMON_2_GPIO_Port, ANOT_COMMON_2_Pin, 1);
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000876:	480d      	ldr	r0, [pc, #52]	; (80008ac <update7SEG+0x124>)
 8000878:	f001 f8a5 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ANOT_COMMON_3_GPIO_Port, ANOT_COMMON_3_Pin, 1);
 800087c:	2201      	movs	r2, #1
 800087e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000882:	480a      	ldr	r0, [pc, #40]	; (80008ac <update7SEG+0x124>)
 8000884:	f001 f89f 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ANOT_COMMON_4_GPIO_Port, ANOT_COMMON_4_Pin, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800088e:	4807      	ldr	r0, [pc, #28]	; (80008ac <update7SEG+0x124>)
 8000890:	f001 f899 	bl	80019c6 <HAL_GPIO_WritePin>
				display7SEG(led_buffer [3]);
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <update7SEG+0x128>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	4618      	mov	r0, r3
 800089a:	f000 f80b 	bl	80008b4 <display7SEG>
			 break ;
 800089e:	e000      	b.n	80008a2 <update7SEG+0x11a>
		 default :
			 break ;
 80008a0:	bf00      	nop
	 }
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40010c00 	.word	0x40010c00
 80008b0:	20000044 	.word	0x20000044

080008b4 <display7SEG>:


void display7SEG ( int counter)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b08      	cmp	r3, #8
 80008c0:	f200 815a 	bhi.w	8000b78 <display7SEG+0x2c4>
 80008c4:	a201      	add	r2, pc, #4	; (adr r2, 80008cc <display7SEG+0x18>)
 80008c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ca:	bf00      	nop
 80008cc:	080008f1 	.word	0x080008f1
 80008d0:	08000939 	.word	0x08000939
 80008d4:	08000981 	.word	0x08000981
 80008d8:	080009c9 	.word	0x080009c9
 80008dc:	08000a11 	.word	0x08000a11
 80008e0:	08000a59 	.word	0x08000a59
 80008e4:	08000aa1 	.word	0x08000aa1
 80008e8:	08000ae9 	.word	0x08000ae9
 80008ec:	08000b31 	.word	0x08000b31
	switch(counter)
	{
		case 0:
		HAL_GPIO_WritePin(A_7_SEG_GPIO_Port, A_7_SEG_Pin, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2101      	movs	r1, #1
 80008f4:	48b4      	ldr	r0, [pc, #720]	; (8000bc8 <display7SEG+0x314>)
 80008f6:	f001 f866 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_7_SEG_GPIO_Port, B_7_SEG_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2102      	movs	r1, #2
 80008fe:	48b2      	ldr	r0, [pc, #712]	; (8000bc8 <display7SEG+0x314>)
 8000900:	f001 f861 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_7_SEG_GPIO_Port, C_7_SEG_Pin, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2104      	movs	r1, #4
 8000908:	48af      	ldr	r0, [pc, #700]	; (8000bc8 <display7SEG+0x314>)
 800090a:	f001 f85c 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_7_SEG_GPIO_Port, D_7_SEG_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2108      	movs	r1, #8
 8000912:	48ad      	ldr	r0, [pc, #692]	; (8000bc8 <display7SEG+0x314>)
 8000914:	f001 f857 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_7_SEG_GPIO_Port, E_7_SEG_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2110      	movs	r1, #16
 800091c:	48aa      	ldr	r0, [pc, #680]	; (8000bc8 <display7SEG+0x314>)
 800091e:	f001 f852 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_7_SEG_GPIO_Port, F_7_SEG_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2120      	movs	r1, #32
 8000926:	48a8      	ldr	r0, [pc, #672]	; (8000bc8 <display7SEG+0x314>)
 8000928:	f001 f84d 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_7_SEG_GPIO_Port, G_7_SEG_Pin, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	2140      	movs	r1, #64	; 0x40
 8000930:	48a5      	ldr	r0, [pc, #660]	; (8000bc8 <display7SEG+0x314>)
 8000932:	f001 f848 	bl	80019c6 <HAL_GPIO_WritePin>
			break;
 8000936:	e143      	b.n	8000bc0 <display7SEG+0x30c>
		case 1:
		HAL_GPIO_WritePin(A_7_SEG_GPIO_Port, A_7_SEG_Pin, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2101      	movs	r1, #1
 800093c:	48a2      	ldr	r0, [pc, #648]	; (8000bc8 <display7SEG+0x314>)
 800093e:	f001 f842 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_7_SEG_GPIO_Port, B_7_SEG_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2102      	movs	r1, #2
 8000946:	48a0      	ldr	r0, [pc, #640]	; (8000bc8 <display7SEG+0x314>)
 8000948:	f001 f83d 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_7_SEG_GPIO_Port, C_7_SEG_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2104      	movs	r1, #4
 8000950:	489d      	ldr	r0, [pc, #628]	; (8000bc8 <display7SEG+0x314>)
 8000952:	f001 f838 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_7_SEG_GPIO_Port, D_7_SEG_Pin, GPIO_PIN_SET);
 8000956:	2201      	movs	r2, #1
 8000958:	2108      	movs	r1, #8
 800095a:	489b      	ldr	r0, [pc, #620]	; (8000bc8 <display7SEG+0x314>)
 800095c:	f001 f833 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_7_SEG_GPIO_Port, E_7_SEG_Pin, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	2110      	movs	r1, #16
 8000964:	4898      	ldr	r0, [pc, #608]	; (8000bc8 <display7SEG+0x314>)
 8000966:	f001 f82e 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_7_SEG_GPIO_Port, F_7_SEG_Pin, GPIO_PIN_SET);
 800096a:	2201      	movs	r2, #1
 800096c:	2120      	movs	r1, #32
 800096e:	4896      	ldr	r0, [pc, #600]	; (8000bc8 <display7SEG+0x314>)
 8000970:	f001 f829 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_7_SEG_GPIO_Port, G_7_SEG_Pin, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	2140      	movs	r1, #64	; 0x40
 8000978:	4893      	ldr	r0, [pc, #588]	; (8000bc8 <display7SEG+0x314>)
 800097a:	f001 f824 	bl	80019c6 <HAL_GPIO_WritePin>
			break;
 800097e:	e11f      	b.n	8000bc0 <display7SEG+0x30c>
		case 2:
		HAL_GPIO_WritePin(A_7_SEG_GPIO_Port, A_7_SEG_Pin, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	2101      	movs	r1, #1
 8000984:	4890      	ldr	r0, [pc, #576]	; (8000bc8 <display7SEG+0x314>)
 8000986:	f001 f81e 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_7_SEG_GPIO_Port, B_7_SEG_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2102      	movs	r1, #2
 800098e:	488e      	ldr	r0, [pc, #568]	; (8000bc8 <display7SEG+0x314>)
 8000990:	f001 f819 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_7_SEG_GPIO_Port, C_7_SEG_Pin, GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	2104      	movs	r1, #4
 8000998:	488b      	ldr	r0, [pc, #556]	; (8000bc8 <display7SEG+0x314>)
 800099a:	f001 f814 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_7_SEG_GPIO_Port, D_7_SEG_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2108      	movs	r1, #8
 80009a2:	4889      	ldr	r0, [pc, #548]	; (8000bc8 <display7SEG+0x314>)
 80009a4:	f001 f80f 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_7_SEG_GPIO_Port, E_7_SEG_Pin, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2110      	movs	r1, #16
 80009ac:	4886      	ldr	r0, [pc, #536]	; (8000bc8 <display7SEG+0x314>)
 80009ae:	f001 f80a 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_7_SEG_GPIO_Port, F_7_SEG_Pin, GPIO_PIN_SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	2120      	movs	r1, #32
 80009b6:	4884      	ldr	r0, [pc, #528]	; (8000bc8 <display7SEG+0x314>)
 80009b8:	f001 f805 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_7_SEG_GPIO_Port, G_7_SEG_Pin, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	2140      	movs	r1, #64	; 0x40
 80009c0:	4881      	ldr	r0, [pc, #516]	; (8000bc8 <display7SEG+0x314>)
 80009c2:	f001 f800 	bl	80019c6 <HAL_GPIO_WritePin>
			break;
 80009c6:	e0fb      	b.n	8000bc0 <display7SEG+0x30c>
		case 3:
		HAL_GPIO_WritePin(A_7_SEG_GPIO_Port, A_7_SEG_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2101      	movs	r1, #1
 80009cc:	487e      	ldr	r0, [pc, #504]	; (8000bc8 <display7SEG+0x314>)
 80009ce:	f000 fffa 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_7_SEG_GPIO_Port, B_7_SEG_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2102      	movs	r1, #2
 80009d6:	487c      	ldr	r0, [pc, #496]	; (8000bc8 <display7SEG+0x314>)
 80009d8:	f000 fff5 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_7_SEG_GPIO_Port, C_7_SEG_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2104      	movs	r1, #4
 80009e0:	4879      	ldr	r0, [pc, #484]	; (8000bc8 <display7SEG+0x314>)
 80009e2:	f000 fff0 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_7_SEG_GPIO_Port, D_7_SEG_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2108      	movs	r1, #8
 80009ea:	4877      	ldr	r0, [pc, #476]	; (8000bc8 <display7SEG+0x314>)
 80009ec:	f000 ffeb 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_7_SEG_GPIO_Port, E_7_SEG_Pin, GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2110      	movs	r1, #16
 80009f4:	4874      	ldr	r0, [pc, #464]	; (8000bc8 <display7SEG+0x314>)
 80009f6:	f000 ffe6 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_7_SEG_GPIO_Port, F_7_SEG_Pin, GPIO_PIN_SET);
 80009fa:	2201      	movs	r2, #1
 80009fc:	2120      	movs	r1, #32
 80009fe:	4872      	ldr	r0, [pc, #456]	; (8000bc8 <display7SEG+0x314>)
 8000a00:	f000 ffe1 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_7_SEG_GPIO_Port, G_7_SEG_Pin, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2140      	movs	r1, #64	; 0x40
 8000a08:	486f      	ldr	r0, [pc, #444]	; (8000bc8 <display7SEG+0x314>)
 8000a0a:	f000 ffdc 	bl	80019c6 <HAL_GPIO_WritePin>
			break;
 8000a0e:	e0d7      	b.n	8000bc0 <display7SEG+0x30c>
		case 4:
		HAL_GPIO_WritePin(A_7_SEG_GPIO_Port, A_7_SEG_Pin, GPIO_PIN_SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	2101      	movs	r1, #1
 8000a14:	486c      	ldr	r0, [pc, #432]	; (8000bc8 <display7SEG+0x314>)
 8000a16:	f000 ffd6 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_7_SEG_GPIO_Port, B_7_SEG_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	486a      	ldr	r0, [pc, #424]	; (8000bc8 <display7SEG+0x314>)
 8000a20:	f000 ffd1 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_7_SEG_GPIO_Port, C_7_SEG_Pin, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2104      	movs	r1, #4
 8000a28:	4867      	ldr	r0, [pc, #412]	; (8000bc8 <display7SEG+0x314>)
 8000a2a:	f000 ffcc 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_7_SEG_GPIO_Port, D_7_SEG_Pin, GPIO_PIN_SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2108      	movs	r1, #8
 8000a32:	4865      	ldr	r0, [pc, #404]	; (8000bc8 <display7SEG+0x314>)
 8000a34:	f000 ffc7 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_7_SEG_GPIO_Port, E_7_SEG_Pin, GPIO_PIN_SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2110      	movs	r1, #16
 8000a3c:	4862      	ldr	r0, [pc, #392]	; (8000bc8 <display7SEG+0x314>)
 8000a3e:	f000 ffc2 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_7_SEG_GPIO_Port, F_7_SEG_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2120      	movs	r1, #32
 8000a46:	4860      	ldr	r0, [pc, #384]	; (8000bc8 <display7SEG+0x314>)
 8000a48:	f000 ffbd 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_7_SEG_GPIO_Port, G_7_SEG_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2140      	movs	r1, #64	; 0x40
 8000a50:	485d      	ldr	r0, [pc, #372]	; (8000bc8 <display7SEG+0x314>)
 8000a52:	f000 ffb8 	bl	80019c6 <HAL_GPIO_WritePin>
			break;
 8000a56:	e0b3      	b.n	8000bc0 <display7SEG+0x30c>
		case 5:
		HAL_GPIO_WritePin(A_7_SEG_GPIO_Port, A_7_SEG_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	485a      	ldr	r0, [pc, #360]	; (8000bc8 <display7SEG+0x314>)
 8000a5e:	f000 ffb2 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_7_SEG_GPIO_Port, B_7_SEG_Pin, GPIO_PIN_SET);
 8000a62:	2201      	movs	r2, #1
 8000a64:	2102      	movs	r1, #2
 8000a66:	4858      	ldr	r0, [pc, #352]	; (8000bc8 <display7SEG+0x314>)
 8000a68:	f000 ffad 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_7_SEG_GPIO_Port, C_7_SEG_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2104      	movs	r1, #4
 8000a70:	4855      	ldr	r0, [pc, #340]	; (8000bc8 <display7SEG+0x314>)
 8000a72:	f000 ffa8 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_7_SEG_GPIO_Port, D_7_SEG_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2108      	movs	r1, #8
 8000a7a:	4853      	ldr	r0, [pc, #332]	; (8000bc8 <display7SEG+0x314>)
 8000a7c:	f000 ffa3 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_7_SEG_GPIO_Port, E_7_SEG_Pin, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2110      	movs	r1, #16
 8000a84:	4850      	ldr	r0, [pc, #320]	; (8000bc8 <display7SEG+0x314>)
 8000a86:	f000 ff9e 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_7_SEG_GPIO_Port, F_7_SEG_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	484e      	ldr	r0, [pc, #312]	; (8000bc8 <display7SEG+0x314>)
 8000a90:	f000 ff99 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_7_SEG_GPIO_Port, G_7_SEG_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2140      	movs	r1, #64	; 0x40
 8000a98:	484b      	ldr	r0, [pc, #300]	; (8000bc8 <display7SEG+0x314>)
 8000a9a:	f000 ff94 	bl	80019c6 <HAL_GPIO_WritePin>
			break;
 8000a9e:	e08f      	b.n	8000bc0 <display7SEG+0x30c>
		case 6:
		HAL_GPIO_WritePin(A_7_SEG_GPIO_Port, A_7_SEG_Pin, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4848      	ldr	r0, [pc, #288]	; (8000bc8 <display7SEG+0x314>)
 8000aa6:	f000 ff8e 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_7_SEG_GPIO_Port, B_7_SEG_Pin, GPIO_PIN_SET);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	2102      	movs	r1, #2
 8000aae:	4846      	ldr	r0, [pc, #280]	; (8000bc8 <display7SEG+0x314>)
 8000ab0:	f000 ff89 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_7_SEG_GPIO_Port, C_7_SEG_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2104      	movs	r1, #4
 8000ab8:	4843      	ldr	r0, [pc, #268]	; (8000bc8 <display7SEG+0x314>)
 8000aba:	f000 ff84 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_7_SEG_GPIO_Port, D_7_SEG_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2108      	movs	r1, #8
 8000ac2:	4841      	ldr	r0, [pc, #260]	; (8000bc8 <display7SEG+0x314>)
 8000ac4:	f000 ff7f 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_7_SEG_GPIO_Port, E_7_SEG_Pin, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2110      	movs	r1, #16
 8000acc:	483e      	ldr	r0, [pc, #248]	; (8000bc8 <display7SEG+0x314>)
 8000ace:	f000 ff7a 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_7_SEG_GPIO_Port, F_7_SEG_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2120      	movs	r1, #32
 8000ad6:	483c      	ldr	r0, [pc, #240]	; (8000bc8 <display7SEG+0x314>)
 8000ad8:	f000 ff75 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_7_SEG_GPIO_Port, G_7_SEG_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2140      	movs	r1, #64	; 0x40
 8000ae0:	4839      	ldr	r0, [pc, #228]	; (8000bc8 <display7SEG+0x314>)
 8000ae2:	f000 ff70 	bl	80019c6 <HAL_GPIO_WritePin>
			break;
 8000ae6:	e06b      	b.n	8000bc0 <display7SEG+0x30c>
		case 7:
		HAL_GPIO_WritePin(A_7_SEG_GPIO_Port, A_7_SEG_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2101      	movs	r1, #1
 8000aec:	4836      	ldr	r0, [pc, #216]	; (8000bc8 <display7SEG+0x314>)
 8000aee:	f000 ff6a 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_7_SEG_GPIO_Port, B_7_SEG_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2102      	movs	r1, #2
 8000af6:	4834      	ldr	r0, [pc, #208]	; (8000bc8 <display7SEG+0x314>)
 8000af8:	f000 ff65 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_7_SEG_GPIO_Port, C_7_SEG_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2104      	movs	r1, #4
 8000b00:	4831      	ldr	r0, [pc, #196]	; (8000bc8 <display7SEG+0x314>)
 8000b02:	f000 ff60 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_7_SEG_GPIO_Port, D_7_SEG_Pin, GPIO_PIN_SET);
 8000b06:	2201      	movs	r2, #1
 8000b08:	2108      	movs	r1, #8
 8000b0a:	482f      	ldr	r0, [pc, #188]	; (8000bc8 <display7SEG+0x314>)
 8000b0c:	f000 ff5b 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_7_SEG_GPIO_Port, E_7_SEG_Pin, GPIO_PIN_SET);
 8000b10:	2201      	movs	r2, #1
 8000b12:	2110      	movs	r1, #16
 8000b14:	482c      	ldr	r0, [pc, #176]	; (8000bc8 <display7SEG+0x314>)
 8000b16:	f000 ff56 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_7_SEG_GPIO_Port, F_7_SEG_Pin, GPIO_PIN_SET);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2120      	movs	r1, #32
 8000b1e:	482a      	ldr	r0, [pc, #168]	; (8000bc8 <display7SEG+0x314>)
 8000b20:	f000 ff51 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_7_SEG_GPIO_Port, G_7_SEG_Pin, GPIO_PIN_SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	2140      	movs	r1, #64	; 0x40
 8000b28:	4827      	ldr	r0, [pc, #156]	; (8000bc8 <display7SEG+0x314>)
 8000b2a:	f000 ff4c 	bl	80019c6 <HAL_GPIO_WritePin>
			break;
 8000b2e:	e047      	b.n	8000bc0 <display7SEG+0x30c>
		case 8:
		HAL_GPIO_WritePin(A_7_SEG_GPIO_Port, A_7_SEG_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2101      	movs	r1, #1
 8000b34:	4824      	ldr	r0, [pc, #144]	; (8000bc8 <display7SEG+0x314>)
 8000b36:	f000 ff46 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_7_SEG_GPIO_Port, B_7_SEG_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	4822      	ldr	r0, [pc, #136]	; (8000bc8 <display7SEG+0x314>)
 8000b40:	f000 ff41 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_7_SEG_GPIO_Port, C_7_SEG_Pin, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2104      	movs	r1, #4
 8000b48:	481f      	ldr	r0, [pc, #124]	; (8000bc8 <display7SEG+0x314>)
 8000b4a:	f000 ff3c 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_7_SEG_GPIO_Port, D_7_SEG_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2108      	movs	r1, #8
 8000b52:	481d      	ldr	r0, [pc, #116]	; (8000bc8 <display7SEG+0x314>)
 8000b54:	f000 ff37 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_7_SEG_GPIO_Port, E_7_SEG_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2110      	movs	r1, #16
 8000b5c:	481a      	ldr	r0, [pc, #104]	; (8000bc8 <display7SEG+0x314>)
 8000b5e:	f000 ff32 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_7_SEG_GPIO_Port, F_7_SEG_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2120      	movs	r1, #32
 8000b66:	4818      	ldr	r0, [pc, #96]	; (8000bc8 <display7SEG+0x314>)
 8000b68:	f000 ff2d 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_7_SEG_GPIO_Port, G_7_SEG_Pin, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2140      	movs	r1, #64	; 0x40
 8000b70:	4815      	ldr	r0, [pc, #84]	; (8000bc8 <display7SEG+0x314>)
 8000b72:	f000 ff28 	bl	80019c6 <HAL_GPIO_WritePin>
			break;
 8000b76:	e023      	b.n	8000bc0 <display7SEG+0x30c>
		default:
		HAL_GPIO_WritePin(A_7_SEG_GPIO_Port, A_7_SEG_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	4812      	ldr	r0, [pc, #72]	; (8000bc8 <display7SEG+0x314>)
 8000b7e:	f000 ff22 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_7_SEG_GPIO_Port, B_7_SEG_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2102      	movs	r1, #2
 8000b86:	4810      	ldr	r0, [pc, #64]	; (8000bc8 <display7SEG+0x314>)
 8000b88:	f000 ff1d 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_7_SEG_GPIO_Port, C_7_SEG_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2104      	movs	r1, #4
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <display7SEG+0x314>)
 8000b92:	f000 ff18 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_7_SEG_GPIO_Port, D_7_SEG_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2108      	movs	r1, #8
 8000b9a:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <display7SEG+0x314>)
 8000b9c:	f000 ff13 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_7_SEG_GPIO_Port, E_7_SEG_Pin, GPIO_PIN_SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2110      	movs	r1, #16
 8000ba4:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <display7SEG+0x314>)
 8000ba6:	f000 ff0e 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_7_SEG_GPIO_Port, F_7_SEG_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2120      	movs	r1, #32
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <display7SEG+0x314>)
 8000bb0:	f000 ff09 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_7_SEG_GPIO_Port, G_7_SEG_Pin, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2140      	movs	r1, #64	; 0x40
 8000bb8:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <display7SEG+0x314>)
 8000bba:	f000 ff04 	bl	80019c6 <HAL_GPIO_WritePin>
			break;
 8000bbe:	bf00      	nop
	}
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40010c00 	.word	0x40010c00

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd0:	f000 fbf8 	bl	80013c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd4:	f000 f80c 	bl	8000bf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd8:	f000 f892 	bl	8000d00 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bdc:	f000 f844 	bl	8000c68 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(& htim2);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <main+0x20>)
 8000be2:	f001 fb4d 	bl	8002280 <HAL_TIM_Base_Start_IT>
  init_state_button();
 8000be6:	f7ff fab1 	bl	800014c <init_state_button>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <main+0x1e>
 8000bec:	2000009c 	.word	0x2000009c

08000bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b090      	sub	sp, #64	; 0x40
 8000bf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf6:	f107 0318 	add.w	r3, r7, #24
 8000bfa:	2228      	movs	r2, #40	; 0x28
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 feee 	bl	80029e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c16:	2301      	movs	r3, #1
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c1a:	2310      	movs	r3, #16
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c22:	f107 0318 	add.w	r3, r7, #24
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 fefe 	bl	8001a28 <HAL_RCC_OscConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c32:	f000 f8d5 	bl	8000de0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c36:	230f      	movs	r3, #15
 8000c38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f001 f96a 	bl	8001f28 <HAL_RCC_ClockConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c5a:	f000 f8c1 	bl	8000de0 <Error_Handler>
  }
}
 8000c5e:	bf00      	nop
 8000c60:	3740      	adds	r7, #64	; 0x40
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c84:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <MX_TIM2_Init+0x94>)
 8000c86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <MX_TIM2_Init+0x94>)
 8000c8e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c94:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_TIM2_Init+0x94>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <MX_TIM2_Init+0x94>)
 8000c9c:	2209      	movs	r2, #9
 8000c9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca0:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <MX_TIM2_Init+0x94>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_TIM2_Init+0x94>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cac:	4813      	ldr	r0, [pc, #76]	; (8000cfc <MX_TIM2_Init+0x94>)
 8000cae:	f001 fa97 	bl	80021e0 <HAL_TIM_Base_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cb8:	f000 f892 	bl	8000de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cc2:	f107 0308 	add.w	r3, r7, #8
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480c      	ldr	r0, [pc, #48]	; (8000cfc <MX_TIM2_Init+0x94>)
 8000cca:	f001 fc15 	bl	80024f8 <HAL_TIM_ConfigClockSource>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cd4:	f000 f884 	bl	8000de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_TIM2_Init+0x94>)
 8000ce6:	f001 fded 	bl	80028c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cf0:	f000 f876 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	2000009c 	.word	0x2000009c

08000d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <MX_GPIO_Init+0xbc>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a28      	ldr	r2, [pc, #160]	; (8000dbc <MX_GPIO_Init+0xbc>)
 8000d1a:	f043 0304 	orr.w	r3, r3, #4
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <MX_GPIO_Init+0xbc>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2c:	4b23      	ldr	r3, [pc, #140]	; (8000dbc <MX_GPIO_Init+0xbc>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a22      	ldr	r2, [pc, #136]	; (8000dbc <MX_GPIO_Init+0xbc>)
 8000d32:	f043 0308 	orr.w	r3, r3, #8
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <MX_GPIO_Init+0xbc>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0308 	and.w	r3, r3, #8
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_GREEN_1_Pin|LED_RED_Pin|LED_YELLOW_1_Pin
 8000d44:	2201      	movs	r2, #1
 8000d46:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 8000d4a:	481d      	ldr	r0, [pc, #116]	; (8000dc0 <MX_GPIO_Init+0xc0>)
 8000d4c:	f000 fe3b 	bl	80019c6 <HAL_GPIO_WritePin>
                          |LED_RED_2_Pin|LED_GREEN_2_Pin|LED_YELLOW_2_Pin|LED_RED_3_Pin
                          |LED_GREEN_3_Pin|LED_YELLOW_3_Pin|LED_RED_4_Pin|LED_GREEN_4_Pin
                          |LED_YELLOW_4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_7_SEG_Pin|B_7_SEG_Pin|C_7_SEG_Pin|ANOT_COMMON_4_Pin
 8000d50:	2201      	movs	r2, #1
 8000d52:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8000d56:	481b      	ldr	r0, [pc, #108]	; (8000dc4 <MX_GPIO_Init+0xc4>)
 8000d58:	f000 fe35 	bl	80019c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_1_Pin LED_GREEN_1_Pin LED_RED_Pin LED_YELLOW_1_Pin
                           LED_RED_2_Pin LED_GREEN_2_Pin LED_YELLOW_2_Pin LED_RED_3_Pin
                           LED_GREEN_3_Pin LED_YELLOW_3_Pin LED_RED_4_Pin LED_GREEN_4_Pin
                           LED_YELLOW_4_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_GREEN_1_Pin|LED_RED_Pin|LED_YELLOW_1_Pin
 8000d5c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000d60:	60bb      	str	r3, [r7, #8]
                          |LED_RED_2_Pin|LED_GREEN_2_Pin|LED_YELLOW_2_Pin|LED_RED_3_Pin
                          |LED_GREEN_3_Pin|LED_YELLOW_3_Pin|LED_RED_4_Pin|LED_GREEN_4_Pin
                          |LED_YELLOW_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0308 	add.w	r3, r7, #8
 8000d72:	4619      	mov	r1, r3
 8000d74:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <MX_GPIO_Init+0xc0>)
 8000d76:	f000 fc95 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_7_SEG_Pin B_7_SEG_Pin C_7_SEG_Pin ANOT_COMMON_4_Pin
                           D_7_SEG_Pin E_7_SEG_Pin F_7_SEG_Pin G_7_SEG_Pin
                           ANOT_COMMON_1_Pin ANOT_COMMON_2_Pin ANOT_COMMON_3_Pin */
  GPIO_InitStruct.Pin = A_7_SEG_Pin|B_7_SEG_Pin|C_7_SEG_Pin|ANOT_COMMON_4_Pin
 8000d7a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d7e:	60bb      	str	r3, [r7, #8]
                          |D_7_SEG_Pin|E_7_SEG_Pin|F_7_SEG_Pin|G_7_SEG_Pin
                          |ANOT_COMMON_1_Pin|ANOT_COMMON_2_Pin|ANOT_COMMON_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	4619      	mov	r1, r3
 8000d92:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <MX_GPIO_Init+0xc4>)
 8000d94:	f000 fc86 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000d98:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	4619      	mov	r1, r3
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_GPIO_Init+0xc4>)
 8000dae:	f000 fc79 	bl	80016a4 <HAL_GPIO_Init>

}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40010800 	.word	0x40010800
 8000dc4:	40010c00 	.word	0x40010c00

08000dc8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	timer_isr();
 8000dd0:	f000 f866 	bl	8000ea0 <timer_isr>
	fsm_setting();
 8000dd4:	f7ff fc7e 	bl	80006d4 <fsm_setting>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <Error_Handler+0x8>
	...

08000dec <timerRun>:

bool OneSecondPass = 0;


void timerRun()
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
	counterOneSecond--;
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <timerRun+0x2c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3b01      	subs	r3, #1
 8000df6:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <timerRun+0x2c>)
 8000df8:	6013      	str	r3, [r2, #0]
	if(counterOneSecond <= 0)
 8000dfa:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <timerRun+0x2c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	dc05      	bgt.n	8000e0e <timerRun+0x22>
	{
		OneSecondPass = 1;
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <timerRun+0x30>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	701a      	strb	r2, [r3, #0]
		counterOneSecond = 1000/TICK;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <timerRun+0x2c>)
 8000e0a:	2264      	movs	r2, #100	; 0x64
 8000e0c:	601a      	str	r2, [r3, #0]
	}
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000004 	.word	0x20000004
 8000e1c:	20000058 	.word	0x20000058

08000e20 <IsOneSecondPassed>:

bool IsOneSecondPassed()
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
	return OneSecondPass;
 8000e24:	4b02      	ldr	r3, [pc, #8]	; (8000e30 <IsOneSecondPassed+0x10>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	20000058 	.word	0x20000058

08000e34 <clearOneSecondFlag>:

void clearOneSecondFlag()
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
	OneSecondPass = 0;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <clearOneSecondFlag+0x14>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000058 	.word	0x20000058

08000e4c <ScanLed7Seg>:

void ScanLed7Seg()
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	if(counterOneSecond%(TimeScanLed7Seg/TICK) == 0)
 8000e50:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <ScanLed7Seg+0x48>)
 8000e52:	6819      	ldr	r1, [r3, #0]
 8000e54:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <ScanLed7Seg+0x4c>)
 8000e56:	fb83 2301 	smull	r2, r3, r3, r1
 8000e5a:	10da      	asrs	r2, r3, #3
 8000e5c:	17cb      	asrs	r3, r1, #31
 8000e5e:	1ad2      	subs	r2, r2, r3
 8000e60:	4613      	mov	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	009a      	lsls	r2, r3, #2
 8000e68:	4413      	add	r3, r2
 8000e6a:	1aca      	subs	r2, r1, r3
 8000e6c:	2a00      	cmp	r2, #0
 8000e6e:	d107      	bne.n	8000e80 <ScanLed7Seg+0x34>
		update7SEG(indexScanLed7Seg++);
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <ScanLed7Seg+0x50>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	1c5a      	adds	r2, r3, #1
 8000e76:	4909      	ldr	r1, [pc, #36]	; (8000e9c <ScanLed7Seg+0x50>)
 8000e78:	600a      	str	r2, [r1, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fc84 	bl	8000788 <update7SEG>

	if(indexScanLed7Seg >= MAX_LED)
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <ScanLed7Seg+0x50>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b03      	cmp	r3, #3
 8000e86:	dd02      	ble.n	8000e8e <ScanLed7Seg+0x42>
		indexScanLed7Seg = 0;
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <ScanLed7Seg+0x50>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000004 	.word	0x20000004
 8000e98:	51eb851f 	.word	0x51eb851f
 8000e9c:	20000054 	.word	0x20000054

08000ea0 <timer_isr>:

void timer_isr()
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	blink_led();
 8000ea4:	f7ff fc40 	bl	8000728 <blink_led>
	ScanLed7Seg();
 8000ea8:	f7ff ffd0 	bl	8000e4c <ScanLed7Seg>
	timerRun();
 8000eac:	f7ff ff9e 	bl	8000dec <timerRun>
	getKeyInput();
 8000eb0:	f7ff f9b0 	bl	8000214 <getKeyInput>
//	UnitTestButton();
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <HAL_MspInit+0x5c>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <HAL_MspInit+0x5c>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6193      	str	r3, [r2, #24]
 8000eca:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_MspInit+0x5c>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <HAL_MspInit+0x5c>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	4a0e      	ldr	r2, [pc, #56]	; (8000f14 <HAL_MspInit+0x5c>)
 8000edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	61d3      	str	r3, [r2, #28]
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <HAL_MspInit+0x5c>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <HAL_MspInit+0x60>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_MspInit+0x60>)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40010000 	.word	0x40010000

08000f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f2c:	d113      	bne.n	8000f56 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_TIM_Base_MspInit+0x44>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <HAL_TIM_Base_MspInit+0x44>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	61d3      	str	r3, [r2, #28]
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_TIM_Base_MspInit+0x44>)
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	201c      	movs	r0, #28
 8000f4c:	f000 fb73 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f50:	201c      	movs	r0, #28
 8000f52:	f000 fb8c 	bl	800166e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40021000 	.word	0x40021000

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <NMI_Handler+0x4>

08000f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <HardFault_Handler+0x4>

08000f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <MemManage_Handler+0x4>

08000f76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <BusFault_Handler+0x4>

08000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <UsageFault_Handler+0x4>

08000f82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr

08000f8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr

08000f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr

08000fa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000faa:	f000 fa51 	bl	8001450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <TIM2_IRQHandler+0x10>)
 8000fba:	f001 f9ad 	bl	8002318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000009c 	.word	0x2000009c

08000fc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <update7SegBufferForOdd>:
int TimeGreenDecrease = 0;

bool Onepass = 0;

void update7SegBufferForOdd(int interval) //odd is index 1 & 3
{//we will minus for 1 to get index of array
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	Set7SegBufferAtIndex(1-1, interval/10); //max 99
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <update7SegBufferForOdd+0x44>)
 8000fe0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fe4:	1092      	asrs	r2, r2, #2
 8000fe6:	17db      	asrs	r3, r3, #31
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	4619      	mov	r1, r3
 8000fec:	2000      	movs	r0, #0
 8000fee:	f7ff fbb5 	bl	800075c <Set7SegBufferAtIndex>
	Set7SegBufferAtIndex(3-1, interval%10);
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <update7SegBufferForOdd+0x44>)
 8000ff6:	fb83 1302 	smull	r1, r3, r3, r2
 8000ffa:	1099      	asrs	r1, r3, #2
 8000ffc:	17d3      	asrs	r3, r2, #31
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	460b      	mov	r3, r1
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	440b      	add	r3, r1
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	1ad1      	subs	r1, r2, r3
 800100a:	2002      	movs	r0, #2
 800100c:	f7ff fba6 	bl	800075c <Set7SegBufferAtIndex>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	66666667 	.word	0x66666667

0800101c <update7SegBufferForEven>:

void update7SegBufferForEven(int interval) //even is index 2 & 4
{//we will minus for 1 to get index of array
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	Set7SegBufferAtIndex(2-1, interval/10); //max 99
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <update7SegBufferForEven+0x44>)
 8001028:	fb82 1203 	smull	r1, r2, r2, r3
 800102c:	1092      	asrs	r2, r2, #2
 800102e:	17db      	asrs	r3, r3, #31
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	4619      	mov	r1, r3
 8001034:	2001      	movs	r0, #1
 8001036:	f7ff fb91 	bl	800075c <Set7SegBufferAtIndex>
	Set7SegBufferAtIndex(4-1, interval%10);
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <update7SegBufferForEven+0x44>)
 800103e:	fb83 1302 	smull	r1, r3, r3, r2
 8001042:	1099      	asrs	r1, r3, #2
 8001044:	17d3      	asrs	r3, r2, #31
 8001046:	1ac9      	subs	r1, r1, r3
 8001048:	460b      	mov	r3, r1
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	1ad1      	subs	r1, r2, r3
 8001052:	2003      	movs	r0, #3
 8001054:	f7ff fb82 	bl	800075c <Set7SegBufferAtIndex>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	66666667 	.word	0x66666667

08001064 <UpdateTimeDecrease>:

void UpdateTimeDecrease()
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
	TimeRedDecrease = TimeForRed;
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <UpdateTimeDecrease+0x24>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <UpdateTimeDecrease+0x28>)
 800106e:	6013      	str	r3, [r2, #0]
	TimeAmberDecrease = TimeForAmber;
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <UpdateTimeDecrease+0x2c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a07      	ldr	r2, [pc, #28]	; (8001094 <UpdateTimeDecrease+0x30>)
 8001076:	6013      	str	r3, [r2, #0]
	TimeGreenDecrease = TimeForGreen;
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <UpdateTimeDecrease+0x34>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a07      	ldr	r2, [pc, #28]	; (800109c <UpdateTimeDecrease+0x38>)
 800107e:	6013      	str	r3, [r2, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	2000005c 	.word	0x2000005c
 800108c:	2000006c 	.word	0x2000006c
 8001090:	20000060 	.word	0x20000060
 8001094:	20000070 	.word	0x20000070
 8001098:	20000064 	.word	0x20000064
 800109c:	20000074 	.word	0x20000074

080010a0 <DecreaseTimeForOne>:

void DecreaseTimeForOne()
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
	TimeRedDecrease --;
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <DecreaseTimeForOne+0x34>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <DecreaseTimeForOne+0x34>)
 80010ac:	6013      	str	r3, [r2, #0]
	if(TimeGreenDecrease < 0)
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <DecreaseTimeForOne+0x38>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	da05      	bge.n	80010c2 <DecreaseTimeForOne+0x22>
		TimeAmberDecrease --;
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <DecreaseTimeForOne+0x3c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <DecreaseTimeForOne+0x3c>)
 80010be:	6013      	str	r3, [r2, #0]
	else
		TimeGreenDecrease --;
}
 80010c0:	e004      	b.n	80010cc <DecreaseTimeForOne+0x2c>
		TimeGreenDecrease --;
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <DecreaseTimeForOne+0x38>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	4a03      	ldr	r2, [pc, #12]	; (80010d8 <DecreaseTimeForOne+0x38>)
 80010ca:	6013      	str	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	2000006c 	.word	0x2000006c
 80010d8:	20000074 	.word	0x20000074
 80010dc:	20000070 	.word	0x20000070

080010e0 <turnOnLedRedForEven>:

void turnOnLedRedForEven()
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, 0); //0 is on
 80010e4:	2200      	movs	r2, #0
 80010e6:	2180      	movs	r1, #128	; 0x80
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <turnOnLedRedForEven+0x20>)
 80010ea:	f000 fc6c 	bl	80019c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_4_GPIO_Port, LED_RED_4_Pin, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <turnOnLedRedForEven+0x20>)
 80010f6:	f000 fc66 	bl	80019c6 <HAL_GPIO_WritePin>
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40010800 	.word	0x40010800

08001104 <turnOnLedRedForOdd>:

void turnOnLedRedForOdd()
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, 0); //0 is on
 8001108:	2200      	movs	r2, #0
 800110a:	2108      	movs	r1, #8
 800110c:	4805      	ldr	r0, [pc, #20]	; (8001124 <turnOnLedRedForOdd+0x20>)
 800110e:	f000 fc5a 	bl	80019c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_3_GPIO_Port, LED_RED_3_Pin, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <turnOnLedRedForOdd+0x20>)
 800111a:	f000 fc54 	bl	80019c6 <HAL_GPIO_WritePin>

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40010800 	.word	0x40010800

08001128 <turnOnLedAmberForEven>:

void turnOnLedAmberForEven()
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, 0); //0 is on
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <turnOnLedAmberForEven+0x20>)
 8001134:	f000 fc47 	bl	80019c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_4_GPIO_Port, LED_YELLOW_4_Pin, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800113e:	4802      	ldr	r0, [pc, #8]	; (8001148 <turnOnLedAmberForEven+0x20>)
 8001140:	f000 fc41 	bl	80019c6 <HAL_GPIO_WritePin>
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40010800 	.word	0x40010800

0800114c <turnOnLedAmberForOdd>:

void turnOnLedAmberForOdd()
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, 0); //0 is on
 8001150:	2200      	movs	r2, #0
 8001152:	2140      	movs	r1, #64	; 0x40
 8001154:	4805      	ldr	r0, [pc, #20]	; (800116c <turnOnLedAmberForOdd+0x20>)
 8001156:	f000 fc36 	bl	80019c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_3_GPIO_Port, LED_YELLOW_3_Pin, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <turnOnLedAmberForOdd+0x20>)
 8001162:	f000 fc30 	bl	80019c6 <HAL_GPIO_WritePin>
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40010800 	.word	0x40010800

08001170 <turnOnLedGreenForEven>:

void turnOnLedGreenForEven()
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, 0); //0 is on
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 7180 	mov.w	r1, #256	; 0x100
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <turnOnLedGreenForEven+0x20>)
 800117c:	f000 fc23 	bl	80019c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_4_GPIO_Port, LED_GREEN_4_Pin, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001186:	4802      	ldr	r0, [pc, #8]	; (8001190 <turnOnLedGreenForEven+0x20>)
 8001188:	f000 fc1d 	bl	80019c6 <HAL_GPIO_WritePin>
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40010800 	.word	0x40010800

08001194 <turnOnLedGreenForOdd>:

void turnOnLedGreenForOdd()
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, 0); //0 is on
 8001198:	2200      	movs	r2, #0
 800119a:	2110      	movs	r1, #16
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <turnOnLedGreenForOdd+0x20>)
 800119e:	f000 fc12 	bl	80019c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_3_GPIO_Port, LED_GREEN_3_Pin, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <turnOnLedGreenForOdd+0x20>)
 80011aa:	f000 fc0c 	bl	80019c6 <HAL_GPIO_WritePin>
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40010800 	.word	0x40010800

080011b8 <clearAllLed>:

void clearAllLed()
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, 1); //0 is on
 80011bc:	2201      	movs	r2, #1
 80011be:	2180      	movs	r1, #128	; 0x80
 80011c0:	4821      	ldr	r0, [pc, #132]	; (8001248 <clearAllLed+0x90>)
 80011c2:	f000 fc00 	bl	80019c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_4_GPIO_Port, LED_RED_4_Pin, 1);
 80011c6:	2201      	movs	r2, #1
 80011c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011cc:	481e      	ldr	r0, [pc, #120]	; (8001248 <clearAllLed+0x90>)
 80011ce:	f000 fbfa 	bl	80019c6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, 1); //0 is on
 80011d2:	2201      	movs	r2, #1
 80011d4:	2108      	movs	r1, #8
 80011d6:	481c      	ldr	r0, [pc, #112]	; (8001248 <clearAllLed+0x90>)
 80011d8:	f000 fbf5 	bl	80019c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_3_GPIO_Port, LED_RED_3_Pin, 1);
 80011dc:	2201      	movs	r2, #1
 80011de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011e2:	4819      	ldr	r0, [pc, #100]	; (8001248 <clearAllLed+0x90>)
 80011e4:	f000 fbef 	bl	80019c6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, 1); //0 is on
 80011e8:	2201      	movs	r2, #1
 80011ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ee:	4816      	ldr	r0, [pc, #88]	; (8001248 <clearAllLed+0x90>)
 80011f0:	f000 fbe9 	bl	80019c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_4_GPIO_Port, LED_YELLOW_4_Pin, 1);
 80011f4:	2201      	movs	r2, #1
 80011f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011fa:	4813      	ldr	r0, [pc, #76]	; (8001248 <clearAllLed+0x90>)
 80011fc:	f000 fbe3 	bl	80019c6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, 1); //0 is on
 8001200:	2201      	movs	r2, #1
 8001202:	2140      	movs	r1, #64	; 0x40
 8001204:	4810      	ldr	r0, [pc, #64]	; (8001248 <clearAllLed+0x90>)
 8001206:	f000 fbde 	bl	80019c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_3_GPIO_Port, LED_YELLOW_3_Pin, 1);
 800120a:	2201      	movs	r2, #1
 800120c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001210:	480d      	ldr	r0, [pc, #52]	; (8001248 <clearAllLed+0x90>)
 8001212:	f000 fbd8 	bl	80019c6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, 1); //0 is on
 8001216:	2201      	movs	r2, #1
 8001218:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121c:	480a      	ldr	r0, [pc, #40]	; (8001248 <clearAllLed+0x90>)
 800121e:	f000 fbd2 	bl	80019c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_4_GPIO_Port, LED_GREEN_4_Pin, 1);
 8001222:	2201      	movs	r2, #1
 8001224:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001228:	4807      	ldr	r0, [pc, #28]	; (8001248 <clearAllLed+0x90>)
 800122a:	f000 fbcc 	bl	80019c6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, 1); //0 is on
 800122e:	2201      	movs	r2, #1
 8001230:	2110      	movs	r1, #16
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <clearAllLed+0x90>)
 8001234:	f000 fbc7 	bl	80019c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_3_GPIO_Port, LED_GREEN_3_Pin, 1);
 8001238:	2201      	movs	r2, #1
 800123a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800123e:	4802      	ldr	r0, [pc, #8]	; (8001248 <clearAllLed+0x90>)
 8001240:	f000 fbc1 	bl	80019c6 <HAL_GPIO_WritePin>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40010800 	.word	0x40010800

0800124c <traffic_light>:

void traffic_light()
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	switch (OddOrEven)
 8001250:	4b43      	ldr	r3, [pc, #268]	; (8001360 <traffic_light+0x114>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d13e      	bne.n	80012d6 <traffic_light+0x8a>
	{
		case 1: //LedRed for odd
				update7SegBufferForOdd(TimeRedDecrease);
 8001258:	4b42      	ldr	r3, [pc, #264]	; (8001364 <traffic_light+0x118>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff feb9 	bl	8000fd4 <update7SegBufferForOdd>

				if(Onepass)
 8001262:	4b41      	ldr	r3, [pc, #260]	; (8001368 <traffic_light+0x11c>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d008      	beq.n	800127c <traffic_light+0x30>
				{
					clearAllLed();
 800126a:	f7ff ffa5 	bl	80011b8 <clearAllLed>
					turnOnLedRedForOdd();
 800126e:	f7ff ff49 	bl	8001104 <turnOnLedRedForOdd>
					turnOnLedGreenForEven();
 8001272:	f7ff ff7d 	bl	8001170 <turnOnLedGreenForEven>
					Onepass = 0;
 8001276:	4b3c      	ldr	r3, [pc, #240]	; (8001368 <traffic_light+0x11c>)
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
				}

				if(TimeGreenDecrease < 0) //switch to Led yellow
 800127c:	4b3b      	ldr	r3, [pc, #236]	; (800136c <traffic_light+0x120>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	da0b      	bge.n	800129c <traffic_light+0x50>
				{
					update7SegBufferForEven(TimeAmberDecrease);
 8001284:	4b3a      	ldr	r3, [pc, #232]	; (8001370 <traffic_light+0x124>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fec7 	bl	800101c <update7SegBufferForEven>
					clearAllLed();
 800128e:	f7ff ff93 	bl	80011b8 <clearAllLed>
					turnOnLedAmberForEven();
 8001292:	f7ff ff49 	bl	8001128 <turnOnLedAmberForEven>
					turnOnLedRedForOdd();
 8001296:	f7ff ff35 	bl	8001104 <turnOnLedRedForOdd>
 800129a:	e004      	b.n	80012a6 <traffic_light+0x5a>
				}

				else
					update7SegBufferForEven(TimeGreenDecrease);
 800129c:	4b33      	ldr	r3, [pc, #204]	; (800136c <traffic_light+0x120>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff febb 	bl	800101c <update7SegBufferForEven>

				if(OneSecondPass) //one second flag on
 80012a6:	4b33      	ldr	r3, [pc, #204]	; (8001374 <traffic_light+0x128>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <traffic_light+0x6a>
				{
					DecreaseTimeForOne();
 80012ae:	f7ff fef7 	bl	80010a0 <DecreaseTimeForOne>
					clearOneSecondFlag(); //clear one second flag
 80012b2:	f7ff fdbf 	bl	8000e34 <clearOneSecondFlag>
				}

				if(TimeRedDecrease < 0)
 80012b6:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <traffic_light+0x118>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	da4a      	bge.n	8001354 <traffic_light+0x108>
				{
					UpdateTimeDecrease();
 80012be:	f7ff fed1 	bl	8001064 <UpdateTimeDecrease>

					clearAllLed();
 80012c2:	f7ff ff79 	bl	80011b8 <clearAllLed>
					turnOnLedRedForEven();
 80012c6:	f7ff ff0b 	bl	80010e0 <turnOnLedRedForEven>
					turnOnLedGreenForOdd();
 80012ca:	f7ff ff63 	bl	8001194 <turnOnLedGreenForOdd>

					OddOrEven = 0; //switch to LedRed state for even
 80012ce:	4b24      	ldr	r3, [pc, #144]	; (8001360 <traffic_light+0x114>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
				}

		break;
 80012d4:	e03e      	b.n	8001354 <traffic_light+0x108>

		default: //Led Red for even
				update7SegBufferForEven(TimeRedDecrease);
 80012d6:	4b23      	ldr	r3, [pc, #140]	; (8001364 <traffic_light+0x118>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fe9e 	bl	800101c <update7SegBufferForEven>

				if(Onepass)
 80012e0:	4b21      	ldr	r3, [pc, #132]	; (8001368 <traffic_light+0x11c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d008      	beq.n	80012fa <traffic_light+0xae>
				{
					clearAllLed();
 80012e8:	f7ff ff66 	bl	80011b8 <clearAllLed>
					turnOnLedRedForEven();
 80012ec:	f7ff fef8 	bl	80010e0 <turnOnLedRedForEven>
					turnOnLedGreenForOdd();
 80012f0:	f7ff ff50 	bl	8001194 <turnOnLedGreenForOdd>
					Onepass = 0;
 80012f4:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <traffic_light+0x11c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
				}

				if(TimeGreenDecrease < 0) //switch to Led yellow
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <traffic_light+0x120>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	da0b      	bge.n	800131a <traffic_light+0xce>
				{
					update7SegBufferForOdd(TimeAmberDecrease);
 8001302:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <traffic_light+0x124>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fe64 	bl	8000fd4 <update7SegBufferForOdd>
					clearAllLed();
 800130c:	f7ff ff54 	bl	80011b8 <clearAllLed>
					turnOnLedAmberForOdd();
 8001310:	f7ff ff1c 	bl	800114c <turnOnLedAmberForOdd>
					turnOnLedRedForEven();
 8001314:	f7ff fee4 	bl	80010e0 <turnOnLedRedForEven>
 8001318:	e004      	b.n	8001324 <traffic_light+0xd8>
				}

				else
					update7SegBufferForOdd(TimeGreenDecrease);
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <traffic_light+0x120>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fe58 	bl	8000fd4 <update7SegBufferForOdd>

				if(OneSecondPass) //one second flag on
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <traffic_light+0x128>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <traffic_light+0xe8>
				{
					DecreaseTimeForOne();
 800132c:	f7ff feb8 	bl	80010a0 <DecreaseTimeForOne>
					clearOneSecondFlag(); //clear one second flag
 8001330:	f7ff fd80 	bl	8000e34 <clearOneSecondFlag>
				}

				if(TimeRedDecrease < 0)
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <traffic_light+0x118>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	da0d      	bge.n	8001358 <traffic_light+0x10c>
				{
					UpdateTimeDecrease();
 800133c:	f7ff fe92 	bl	8001064 <UpdateTimeDecrease>

					clearAllLed();
 8001340:	f7ff ff3a 	bl	80011b8 <clearAllLed>
					turnOnLedRedForOdd();
 8001344:	f7ff fede 	bl	8001104 <turnOnLedRedForOdd>
					turnOnLedGreenForEven();
 8001348:	f7ff ff12 	bl	8001170 <turnOnLedGreenForEven>

					OddOrEven = 1; //switch to LedRed state for odd
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <traffic_light+0x114>)
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
				}
		break;
 8001352:	e001      	b.n	8001358 <traffic_light+0x10c>
		break;
 8001354:	bf00      	nop
 8001356:	e000      	b.n	800135a <traffic_light+0x10e>
		break;
 8001358:	bf00      	nop
	}
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000068 	.word	0x20000068
 8001364:	2000006c 	.word	0x2000006c
 8001368:	20000078 	.word	0x20000078
 800136c:	20000074 	.word	0x20000074
 8001370:	20000070 	.word	0x20000070
 8001374:	20000058 	.word	0x20000058

08001378 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001378:	f7ff fe26 	bl	8000fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800137c:	480b      	ldr	r0, [pc, #44]	; (80013ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800137e:	490c      	ldr	r1, [pc, #48]	; (80013b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001380:	4a0c      	ldr	r2, [pc, #48]	; (80013b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001384:	e002      	b.n	800138c <LoopCopyDataInit>

08001386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138a:	3304      	adds	r3, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800138c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001390:	d3f9      	bcc.n	8001386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001392:	4a09      	ldr	r2, [pc, #36]	; (80013b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001394:	4c09      	ldr	r4, [pc, #36]	; (80013bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001398:	e001      	b.n	800139e <LoopFillZerobss>

0800139a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800139c:	3204      	adds	r2, #4

0800139e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a0:	d3fb      	bcc.n	800139a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013a2:	f001 faf9 	bl	8002998 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013a6:	f7ff fc11 	bl	8000bcc <main>
  bx lr
 80013aa:	4770      	bx	lr
  ldr r0, =_sdata
 80013ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80013b4:	08002a34 	.word	0x08002a34
  ldr r2, =_sbss
 80013b8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80013bc:	200000e8 	.word	0x200000e8

080013c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC1_2_IRQHandler>
	...

080013c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_Init+0x28>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a07      	ldr	r2, [pc, #28]	; (80013ec <HAL_Init+0x28>)
 80013ce:	f043 0310 	orr.w	r3, r3, #16
 80013d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d4:	2003      	movs	r0, #3
 80013d6:	f000 f923 	bl	8001620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013da:	200f      	movs	r0, #15
 80013dc:	f000 f808 	bl	80013f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e0:	f7ff fd6a 	bl	8000eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40022000 	.word	0x40022000

080013f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_InitTick+0x54>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_InitTick+0x58>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001406:	fbb3 f3f1 	udiv	r3, r3, r1
 800140a:	fbb2 f3f3 	udiv	r3, r2, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f93b 	bl	800168a <HAL_SYSTICK_Config>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e00e      	b.n	800143c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b0f      	cmp	r3, #15
 8001422:	d80a      	bhi.n	800143a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001424:	2200      	movs	r2, #0
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f000 f903 	bl	8001636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001430:	4a06      	ldr	r2, [pc, #24]	; (800144c <HAL_InitTick+0x5c>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	e000      	b.n	800143c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000008 	.word	0x20000008
 8001448:	20000010 	.word	0x20000010
 800144c:	2000000c 	.word	0x2000000c

08001450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_IncTick+0x1c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_IncTick+0x20>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4413      	add	r3, r2
 8001460:	4a03      	ldr	r2, [pc, #12]	; (8001470 <HAL_IncTick+0x20>)
 8001462:	6013      	str	r3, [r2, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	20000010 	.word	0x20000010
 8001470:	200000e4 	.word	0x200000e4

08001474 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return uwTick;
 8001478:	4b02      	ldr	r3, [pc, #8]	; (8001484 <HAL_GetTick+0x10>)
 800147a:	681b      	ldr	r3, [r3, #0]
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	200000e4 	.word	0x200000e4

08001488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a4:	4013      	ands	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ba:	4a04      	ldr	r2, [pc, #16]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	60d3      	str	r3, [r2, #12]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <__NVIC_GetPriorityGrouping+0x18>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	f003 0307 	and.w	r3, r3, #7
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	db0b      	blt.n	8001516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	f003 021f 	and.w	r2, r3, #31
 8001504:	4906      	ldr	r1, [pc, #24]	; (8001520 <__NVIC_EnableIRQ+0x34>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	095b      	lsrs	r3, r3, #5
 800150c:	2001      	movs	r0, #1
 800150e:	fa00 f202 	lsl.w	r2, r0, r2
 8001512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	e000e100 	.word	0xe000e100

08001524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	db0a      	blt.n	800154e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	b2da      	uxtb	r2, r3
 800153c:	490c      	ldr	r1, [pc, #48]	; (8001570 <__NVIC_SetPriority+0x4c>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	0112      	lsls	r2, r2, #4
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	440b      	add	r3, r1
 8001548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800154c:	e00a      	b.n	8001564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4908      	ldr	r1, [pc, #32]	; (8001574 <__NVIC_SetPriority+0x50>)
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	3b04      	subs	r3, #4
 800155c:	0112      	lsls	r2, r2, #4
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	440b      	add	r3, r1
 8001562:	761a      	strb	r2, [r3, #24]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000e100 	.word	0xe000e100
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	; 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f1c3 0307 	rsb	r3, r3, #7
 8001592:	2b04      	cmp	r3, #4
 8001594:	bf28      	it	cs
 8001596:	2304      	movcs	r3, #4
 8001598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3304      	adds	r3, #4
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d902      	bls.n	80015a8 <NVIC_EncodePriority+0x30>
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3b03      	subs	r3, #3
 80015a6:	e000      	b.n	80015aa <NVIC_EncodePriority+0x32>
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	f04f 32ff 	mov.w	r2, #4294967295
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43da      	mvns	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	401a      	ands	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ca:	43d9      	mvns	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	4313      	orrs	r3, r2
         );
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3724      	adds	r7, #36	; 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ec:	d301      	bcc.n	80015f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00f      	b.n	8001612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <SysTick_Config+0x40>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fa:	210f      	movs	r1, #15
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f7ff ff90 	bl	8001524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <SysTick_Config+0x40>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <SysTick_Config+0x40>)
 800160c:	2207      	movs	r2, #7
 800160e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	e000e010 	.word	0xe000e010

08001620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff2d 	bl	8001488 <__NVIC_SetPriorityGrouping>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001648:	f7ff ff42 	bl	80014d0 <__NVIC_GetPriorityGrouping>
 800164c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	6978      	ldr	r0, [r7, #20]
 8001654:	f7ff ff90 	bl	8001578 <NVIC_EncodePriority>
 8001658:	4602      	mov	r2, r0
 800165a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff5f 	bl	8001524 <__NVIC_SetPriority>
}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff35 	bl	80014ec <__NVIC_EnableIRQ>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffa2 	bl	80015dc <SysTick_Config>
 8001698:	4603      	mov	r3, r0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b08b      	sub	sp, #44	; 0x2c
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b6:	e148      	b.n	800194a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016b8:	2201      	movs	r2, #1
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	f040 8137 	bne.w	8001944 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4aa3      	ldr	r2, [pc, #652]	; (8001968 <HAL_GPIO_Init+0x2c4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d05e      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 80016e0:	4aa1      	ldr	r2, [pc, #644]	; (8001968 <HAL_GPIO_Init+0x2c4>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d875      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 80016e6:	4aa1      	ldr	r2, [pc, #644]	; (800196c <HAL_GPIO_Init+0x2c8>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d058      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 80016ec:	4a9f      	ldr	r2, [pc, #636]	; (800196c <HAL_GPIO_Init+0x2c8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d86f      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 80016f2:	4a9f      	ldr	r2, [pc, #636]	; (8001970 <HAL_GPIO_Init+0x2cc>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d052      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 80016f8:	4a9d      	ldr	r2, [pc, #628]	; (8001970 <HAL_GPIO_Init+0x2cc>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d869      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 80016fe:	4a9d      	ldr	r2, [pc, #628]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d04c      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 8001704:	4a9b      	ldr	r2, [pc, #620]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d863      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 800170a:	4a9b      	ldr	r2, [pc, #620]	; (8001978 <HAL_GPIO_Init+0x2d4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d046      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 8001710:	4a99      	ldr	r2, [pc, #612]	; (8001978 <HAL_GPIO_Init+0x2d4>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d85d      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 8001716:	2b12      	cmp	r3, #18
 8001718:	d82a      	bhi.n	8001770 <HAL_GPIO_Init+0xcc>
 800171a:	2b12      	cmp	r3, #18
 800171c:	d859      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 800171e:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <HAL_GPIO_Init+0x80>)
 8001720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001724:	0800179f 	.word	0x0800179f
 8001728:	08001779 	.word	0x08001779
 800172c:	0800178b 	.word	0x0800178b
 8001730:	080017cd 	.word	0x080017cd
 8001734:	080017d3 	.word	0x080017d3
 8001738:	080017d3 	.word	0x080017d3
 800173c:	080017d3 	.word	0x080017d3
 8001740:	080017d3 	.word	0x080017d3
 8001744:	080017d3 	.word	0x080017d3
 8001748:	080017d3 	.word	0x080017d3
 800174c:	080017d3 	.word	0x080017d3
 8001750:	080017d3 	.word	0x080017d3
 8001754:	080017d3 	.word	0x080017d3
 8001758:	080017d3 	.word	0x080017d3
 800175c:	080017d3 	.word	0x080017d3
 8001760:	080017d3 	.word	0x080017d3
 8001764:	080017d3 	.word	0x080017d3
 8001768:	08001781 	.word	0x08001781
 800176c:	08001795 	.word	0x08001795
 8001770:	4a82      	ldr	r2, [pc, #520]	; (800197c <HAL_GPIO_Init+0x2d8>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d013      	beq.n	800179e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001776:	e02c      	b.n	80017d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	623b      	str	r3, [r7, #32]
          break;
 800177e:	e029      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	3304      	adds	r3, #4
 8001786:	623b      	str	r3, [r7, #32]
          break;
 8001788:	e024      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	3308      	adds	r3, #8
 8001790:	623b      	str	r3, [r7, #32]
          break;
 8001792:	e01f      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	330c      	adds	r3, #12
 800179a:	623b      	str	r3, [r7, #32]
          break;
 800179c:	e01a      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017a6:	2304      	movs	r3, #4
 80017a8:	623b      	str	r3, [r7, #32]
          break;
 80017aa:	e013      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d105      	bne.n	80017c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b4:	2308      	movs	r3, #8
 80017b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	611a      	str	r2, [r3, #16]
          break;
 80017be:	e009      	b.n	80017d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c0:	2308      	movs	r3, #8
 80017c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	615a      	str	r2, [r3, #20]
          break;
 80017ca:	e003      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017cc:	2300      	movs	r3, #0
 80017ce:	623b      	str	r3, [r7, #32]
          break;
 80017d0:	e000      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          break;
 80017d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	2bff      	cmp	r3, #255	; 0xff
 80017d8:	d801      	bhi.n	80017de <HAL_GPIO_Init+0x13a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	e001      	b.n	80017e2 <HAL_GPIO_Init+0x13e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3304      	adds	r3, #4
 80017e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2bff      	cmp	r3, #255	; 0xff
 80017e8:	d802      	bhi.n	80017f0 <HAL_GPIO_Init+0x14c>
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	e002      	b.n	80017f6 <HAL_GPIO_Init+0x152>
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	3b08      	subs	r3, #8
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	210f      	movs	r1, #15
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	401a      	ands	r2, r3
 8001808:	6a39      	ldr	r1, [r7, #32]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	fa01 f303 	lsl.w	r3, r1, r3
 8001810:	431a      	orrs	r2, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 8090 	beq.w	8001944 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001824:	4b56      	ldr	r3, [pc, #344]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	4a55      	ldr	r2, [pc, #340]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6193      	str	r3, [r2, #24]
 8001830:	4b53      	ldr	r3, [pc, #332]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800183c:	4a51      	ldr	r2, [pc, #324]	; (8001984 <HAL_GPIO_Init+0x2e0>)
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	089b      	lsrs	r3, r3, #2
 8001842:	3302      	adds	r3, #2
 8001844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001848:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	220f      	movs	r2, #15
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4013      	ands	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a49      	ldr	r2, [pc, #292]	; (8001988 <HAL_GPIO_Init+0x2e4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d00d      	beq.n	8001884 <HAL_GPIO_Init+0x1e0>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a48      	ldr	r2, [pc, #288]	; (800198c <HAL_GPIO_Init+0x2e8>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d007      	beq.n	8001880 <HAL_GPIO_Init+0x1dc>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a47      	ldr	r2, [pc, #284]	; (8001990 <HAL_GPIO_Init+0x2ec>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d101      	bne.n	800187c <HAL_GPIO_Init+0x1d8>
 8001878:	2302      	movs	r3, #2
 800187a:	e004      	b.n	8001886 <HAL_GPIO_Init+0x1e2>
 800187c:	2303      	movs	r3, #3
 800187e:	e002      	b.n	8001886 <HAL_GPIO_Init+0x1e2>
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <HAL_GPIO_Init+0x1e2>
 8001884:	2300      	movs	r3, #0
 8001886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001888:	f002 0203 	and.w	r2, r2, #3
 800188c:	0092      	lsls	r2, r2, #2
 800188e:	4093      	lsls	r3, r2
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4313      	orrs	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001896:	493b      	ldr	r1, [pc, #236]	; (8001984 <HAL_GPIO_Init+0x2e0>)
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	089b      	lsrs	r3, r3, #2
 800189c:	3302      	adds	r3, #2
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d006      	beq.n	80018be <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018b0:	4b38      	ldr	r3, [pc, #224]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	4937      	ldr	r1, [pc, #220]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	608b      	str	r3, [r1, #8]
 80018bc:	e006      	b.n	80018cc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018be:	4b35      	ldr	r3, [pc, #212]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	4933      	ldr	r1, [pc, #204]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d006      	beq.n	80018e6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018d8:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	492d      	ldr	r1, [pc, #180]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	60cb      	str	r3, [r1, #12]
 80018e4:	e006      	b.n	80018f4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018e6:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018e8:	68da      	ldr	r2, [r3, #12]
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	4929      	ldr	r1, [pc, #164]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	4923      	ldr	r1, [pc, #140]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	604b      	str	r3, [r1, #4]
 800190c:	e006      	b.n	800191c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800190e:	4b21      	ldr	r3, [pc, #132]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	43db      	mvns	r3, r3
 8001916:	491f      	ldr	r1, [pc, #124]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 8001918:	4013      	ands	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d006      	beq.n	8001936 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001928:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4919      	ldr	r1, [pc, #100]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	600b      	str	r3, [r1, #0]
 8001934:	e006      	b.n	8001944 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001936:	4b17      	ldr	r3, [pc, #92]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	43db      	mvns	r3, r3
 800193e:	4915      	ldr	r1, [pc, #84]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 8001940:	4013      	ands	r3, r2
 8001942:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	3301      	adds	r3, #1
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	fa22 f303 	lsr.w	r3, r2, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	f47f aeaf 	bne.w	80016b8 <HAL_GPIO_Init+0x14>
  }
}
 800195a:	bf00      	nop
 800195c:	bf00      	nop
 800195e:	372c      	adds	r7, #44	; 0x2c
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	10320000 	.word	0x10320000
 800196c:	10310000 	.word	0x10310000
 8001970:	10220000 	.word	0x10220000
 8001974:	10210000 	.word	0x10210000
 8001978:	10120000 	.word	0x10120000
 800197c:	10110000 	.word	0x10110000
 8001980:	40021000 	.word	0x40021000
 8001984:	40010000 	.word	0x40010000
 8001988:	40010800 	.word	0x40010800
 800198c:	40010c00 	.word	0x40010c00
 8001990:	40011000 	.word	0x40011000
 8001994:	40010400 	.word	0x40010400

08001998 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	887b      	ldrh	r3, [r7, #2]
 80019aa:	4013      	ands	r3, r2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d002      	beq.n	80019b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	e001      	b.n	80019ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	460b      	mov	r3, r1
 80019d0:	807b      	strh	r3, [r7, #2]
 80019d2:	4613      	mov	r3, r2
 80019d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019d6:	787b      	ldrb	r3, [r7, #1]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019dc:	887a      	ldrh	r2, [r7, #2]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019e2:	e003      	b.n	80019ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019e4:	887b      	ldrh	r3, [r7, #2]
 80019e6:	041a      	lsls	r2, r3, #16
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	611a      	str	r2, [r3, #16]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr

080019f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b085      	sub	sp, #20
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	460b      	mov	r3, r1
 8001a00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a08:	887a      	ldrh	r2, [r7, #2]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	041a      	lsls	r2, r3, #16
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	400b      	ands	r3, r1
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	611a      	str	r2, [r3, #16]
}
 8001a1e:	bf00      	nop
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e26c      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 8087 	beq.w	8001b56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a48:	4b92      	ldr	r3, [pc, #584]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d00c      	beq.n	8001a6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a54:	4b8f      	ldr	r3, [pc, #572]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 030c 	and.w	r3, r3, #12
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d112      	bne.n	8001a86 <HAL_RCC_OscConfig+0x5e>
 8001a60:	4b8c      	ldr	r3, [pc, #560]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6c:	d10b      	bne.n	8001a86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a6e:	4b89      	ldr	r3, [pc, #548]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d06c      	beq.n	8001b54 <HAL_RCC_OscConfig+0x12c>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d168      	bne.n	8001b54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e246      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8e:	d106      	bne.n	8001a9e <HAL_RCC_OscConfig+0x76>
 8001a90:	4b80      	ldr	r3, [pc, #512]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a7f      	ldr	r2, [pc, #508]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	e02e      	b.n	8001afc <HAL_RCC_OscConfig+0xd4>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x98>
 8001aa6:	4b7b      	ldr	r3, [pc, #492]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a7a      	ldr	r2, [pc, #488]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	4b78      	ldr	r3, [pc, #480]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a77      	ldr	r2, [pc, #476]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	e01d      	b.n	8001afc <HAL_RCC_OscConfig+0xd4>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac8:	d10c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0xbc>
 8001aca:	4b72      	ldr	r3, [pc, #456]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a71      	ldr	r2, [pc, #452]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	4b6f      	ldr	r3, [pc, #444]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a6e      	ldr	r2, [pc, #440]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	e00b      	b.n	8001afc <HAL_RCC_OscConfig+0xd4>
 8001ae4:	4b6b      	ldr	r3, [pc, #428]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a6a      	ldr	r2, [pc, #424]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	4b68      	ldr	r3, [pc, #416]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a67      	ldr	r2, [pc, #412]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d013      	beq.n	8001b2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff fcb6 	bl	8001474 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b0c:	f7ff fcb2 	bl	8001474 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	; 0x64
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e1fa      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1e:	4b5d      	ldr	r3, [pc, #372]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0xe4>
 8001b2a:	e014      	b.n	8001b56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fca2 	bl	8001474 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b34:	f7ff fc9e 	bl	8001474 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b64      	cmp	r3, #100	; 0x64
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e1e6      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b46:	4b53      	ldr	r3, [pc, #332]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x10c>
 8001b52:	e000      	b.n	8001b56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d063      	beq.n	8001c2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b62:	4b4c      	ldr	r3, [pc, #304]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00b      	beq.n	8001b86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b6e:	4b49      	ldr	r3, [pc, #292]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d11c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x18c>
 8001b7a:	4b46      	ldr	r3, [pc, #280]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d116      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b86:	4b43      	ldr	r3, [pc, #268]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d005      	beq.n	8001b9e <HAL_RCC_OscConfig+0x176>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d001      	beq.n	8001b9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e1ba      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9e:	4b3d      	ldr	r3, [pc, #244]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	4939      	ldr	r1, [pc, #228]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb2:	e03a      	b.n	8001c2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d020      	beq.n	8001bfe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bbc:	4b36      	ldr	r3, [pc, #216]	; (8001c98 <HAL_RCC_OscConfig+0x270>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc2:	f7ff fc57 	bl	8001474 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bca:	f7ff fc53 	bl	8001474 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e19b      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bdc:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be8:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	4927      	ldr	r1, [pc, #156]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	600b      	str	r3, [r1, #0]
 8001bfc:	e015      	b.n	8001c2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bfe:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <HAL_RCC_OscConfig+0x270>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7ff fc36 	bl	8001474 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0c:	f7ff fc32 	bl	8001474 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e17a      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d03a      	beq.n	8001cac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d019      	beq.n	8001c72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c3e:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c44:	f7ff fc16 	bl	8001474 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c4c:	f7ff fc12 	bl	8001474 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e15a      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	f000 fa9a 	bl	80021a4 <RCC_Delay>
 8001c70:	e01c      	b.n	8001cac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c78:	f7ff fbfc 	bl	8001474 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c7e:	e00f      	b.n	8001ca0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c80:	f7ff fbf8 	bl	8001474 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d908      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e140      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000
 8001c98:	42420000 	.word	0x42420000
 8001c9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca0:	4b9e      	ldr	r3, [pc, #632]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1e9      	bne.n	8001c80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80a6 	beq.w	8001e06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cbe:	4b97      	ldr	r3, [pc, #604]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10d      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	4b94      	ldr	r3, [pc, #592]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	4a93      	ldr	r2, [pc, #588]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	61d3      	str	r3, [r2, #28]
 8001cd6:	4b91      	ldr	r3, [pc, #580]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce6:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <HAL_RCC_OscConfig+0x4f8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d118      	bne.n	8001d24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cf2:	4b8b      	ldr	r3, [pc, #556]	; (8001f20 <HAL_RCC_OscConfig+0x4f8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a8a      	ldr	r2, [pc, #552]	; (8001f20 <HAL_RCC_OscConfig+0x4f8>)
 8001cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cfe:	f7ff fbb9 	bl	8001474 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d06:	f7ff fbb5 	bl	8001474 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b64      	cmp	r3, #100	; 0x64
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e0fd      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d18:	4b81      	ldr	r3, [pc, #516]	; (8001f20 <HAL_RCC_OscConfig+0x4f8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d106      	bne.n	8001d3a <HAL_RCC_OscConfig+0x312>
 8001d2c:	4b7b      	ldr	r3, [pc, #492]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4a7a      	ldr	r2, [pc, #488]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6213      	str	r3, [r2, #32]
 8001d38:	e02d      	b.n	8001d96 <HAL_RCC_OscConfig+0x36e>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x334>
 8001d42:	4b76      	ldr	r3, [pc, #472]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	4a75      	ldr	r2, [pc, #468]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d48:	f023 0301 	bic.w	r3, r3, #1
 8001d4c:	6213      	str	r3, [r2, #32]
 8001d4e:	4b73      	ldr	r3, [pc, #460]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	4a72      	ldr	r2, [pc, #456]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d54:	f023 0304 	bic.w	r3, r3, #4
 8001d58:	6213      	str	r3, [r2, #32]
 8001d5a:	e01c      	b.n	8001d96 <HAL_RCC_OscConfig+0x36e>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b05      	cmp	r3, #5
 8001d62:	d10c      	bne.n	8001d7e <HAL_RCC_OscConfig+0x356>
 8001d64:	4b6d      	ldr	r3, [pc, #436]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	4a6c      	ldr	r2, [pc, #432]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d6a:	f043 0304 	orr.w	r3, r3, #4
 8001d6e:	6213      	str	r3, [r2, #32]
 8001d70:	4b6a      	ldr	r3, [pc, #424]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	4a69      	ldr	r2, [pc, #420]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6213      	str	r3, [r2, #32]
 8001d7c:	e00b      	b.n	8001d96 <HAL_RCC_OscConfig+0x36e>
 8001d7e:	4b67      	ldr	r3, [pc, #412]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	4a66      	ldr	r2, [pc, #408]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	6213      	str	r3, [r2, #32]
 8001d8a:	4b64      	ldr	r3, [pc, #400]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	4a63      	ldr	r2, [pc, #396]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	f023 0304 	bic.w	r3, r3, #4
 8001d94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d015      	beq.n	8001dca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9e:	f7ff fb69 	bl	8001474 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da4:	e00a      	b.n	8001dbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da6:	f7ff fb65 	bl	8001474 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e0ab      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dbc:	4b57      	ldr	r3, [pc, #348]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0ee      	beq.n	8001da6 <HAL_RCC_OscConfig+0x37e>
 8001dc8:	e014      	b.n	8001df4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dca:	f7ff fb53 	bl	8001474 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd0:	e00a      	b.n	8001de8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd2:	f7ff fb4f 	bl	8001474 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e095      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de8:	4b4c      	ldr	r3, [pc, #304]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1ee      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001df4:	7dfb      	ldrb	r3, [r7, #23]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d105      	bne.n	8001e06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dfa:	4b48      	ldr	r3, [pc, #288]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4a47      	ldr	r2, [pc, #284]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 8081 	beq.w	8001f12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e10:	4b42      	ldr	r3, [pc, #264]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 030c 	and.w	r3, r3, #12
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d061      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d146      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e24:	4b3f      	ldr	r3, [pc, #252]	; (8001f24 <HAL_RCC_OscConfig+0x4fc>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2a:	f7ff fb23 	bl	8001474 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e32:	f7ff fb1f 	bl	8001474 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e067      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e44:	4b35      	ldr	r3, [pc, #212]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f0      	bne.n	8001e32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e58:	d108      	bne.n	8001e6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e5a:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	492d      	ldr	r1, [pc, #180]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e6c:	4b2b      	ldr	r3, [pc, #172]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a19      	ldr	r1, [r3, #32]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	430b      	orrs	r3, r1
 8001e7e:	4927      	ldr	r1, [pc, #156]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e84:	4b27      	ldr	r3, [pc, #156]	; (8001f24 <HAL_RCC_OscConfig+0x4fc>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8a:	f7ff faf3 	bl	8001474 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e92:	f7ff faef 	bl	8001474 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e037      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x46a>
 8001eb0:	e02f      	b.n	8001f12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb2:	4b1c      	ldr	r3, [pc, #112]	; (8001f24 <HAL_RCC_OscConfig+0x4fc>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fadc 	bl	8001474 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7ff fad8 	bl	8001474 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e020      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x498>
 8001ede:	e018      	b.n	8001f12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e013      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d106      	bne.n	8001f0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d001      	beq.n	8001f12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40007000 	.word	0x40007000
 8001f24:	42420060 	.word	0x42420060

08001f28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0d0      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b6a      	ldr	r3, [pc, #424]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d910      	bls.n	8001f6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b67      	ldr	r3, [pc, #412]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 0207 	bic.w	r2, r3, #7
 8001f52:	4965      	ldr	r1, [pc, #404]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5a:	4b63      	ldr	r3, [pc, #396]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0b8      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d020      	beq.n	8001fba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f84:	4b59      	ldr	r3, [pc, #356]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4a58      	ldr	r2, [pc, #352]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001f8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f9c:	4b53      	ldr	r3, [pc, #332]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	4a52      	ldr	r2, [pc, #328]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa8:	4b50      	ldr	r3, [pc, #320]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	494d      	ldr	r1, [pc, #308]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d040      	beq.n	8002048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d107      	bne.n	8001fde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	4b47      	ldr	r3, [pc, #284]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d115      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e07f      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe6:	4b41      	ldr	r3, [pc, #260]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e073      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e06b      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002006:	4b39      	ldr	r3, [pc, #228]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f023 0203 	bic.w	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4936      	ldr	r1, [pc, #216]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002018:	f7ff fa2c 	bl	8001474 <HAL_GetTick>
 800201c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201e:	e00a      	b.n	8002036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002020:	f7ff fa28 	bl	8001474 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	; 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e053      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002036:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 020c 	and.w	r2, r3, #12
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	429a      	cmp	r2, r3
 8002046:	d1eb      	bne.n	8002020 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002048:	4b27      	ldr	r3, [pc, #156]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d210      	bcs.n	8002078 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b24      	ldr	r3, [pc, #144]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 0207 	bic.w	r2, r3, #7
 800205e:	4922      	ldr	r1, [pc, #136]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e032      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	4916      	ldr	r1, [pc, #88]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	4313      	orrs	r3, r2
 8002094:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d009      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020a2:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	490e      	ldr	r1, [pc, #56]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020b6:	f000 f821 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 80020ba:	4602      	mov	r2, r0
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	490a      	ldr	r1, [pc, #40]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 80020c8:	5ccb      	ldrb	r3, [r1, r3]
 80020ca:	fa22 f303 	lsr.w	r3, r2, r3
 80020ce:	4a09      	ldr	r2, [pc, #36]	; (80020f4 <HAL_RCC_ClockConfig+0x1cc>)
 80020d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_RCC_ClockConfig+0x1d0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff f98a 	bl	80013f0 <HAL_InitTick>

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40022000 	.word	0x40022000
 80020ec:	40021000 	.word	0x40021000
 80020f0:	08002a08 	.word	0x08002a08
 80020f4:	20000008 	.word	0x20000008
 80020f8:	2000000c 	.word	0x2000000c

080020fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002116:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <HAL_RCC_GetSysClockFreq+0x94>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b04      	cmp	r3, #4
 8002124:	d002      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x30>
 8002126:	2b08      	cmp	r3, #8
 8002128:	d003      	beq.n	8002132 <HAL_RCC_GetSysClockFreq+0x36>
 800212a:	e027      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800212c:	4b19      	ldr	r3, [pc, #100]	; (8002194 <HAL_RCC_GetSysClockFreq+0x98>)
 800212e:	613b      	str	r3, [r7, #16]
      break;
 8002130:	e027      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	0c9b      	lsrs	r3, r3, #18
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	4a17      	ldr	r2, [pc, #92]	; (8002198 <HAL_RCC_GetSysClockFreq+0x9c>)
 800213c:	5cd3      	ldrb	r3, [r2, r3]
 800213e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d010      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800214a:	4b11      	ldr	r3, [pc, #68]	; (8002190 <HAL_RCC_GetSysClockFreq+0x94>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	0c5b      	lsrs	r3, r3, #17
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	4a11      	ldr	r2, [pc, #68]	; (800219c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a0d      	ldr	r2, [pc, #52]	; (8002194 <HAL_RCC_GetSysClockFreq+0x98>)
 800215e:	fb02 f203 	mul.w	r2, r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	fbb2 f3f3 	udiv	r3, r2, r3
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	e004      	b.n	8002176 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a0c      	ldr	r2, [pc, #48]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002170:	fb02 f303 	mul.w	r3, r2, r3
 8002174:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	613b      	str	r3, [r7, #16]
      break;
 800217a:	e002      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_RCC_GetSysClockFreq+0x98>)
 800217e:	613b      	str	r3, [r7, #16]
      break;
 8002180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002182:	693b      	ldr	r3, [r7, #16]
}
 8002184:	4618      	mov	r0, r3
 8002186:	371c      	adds	r7, #28
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
 8002194:	007a1200 	.word	0x007a1200
 8002198:	08002a18 	.word	0x08002a18
 800219c:	08002a28 	.word	0x08002a28
 80021a0:	003d0900 	.word	0x003d0900

080021a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021ac:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <RCC_Delay+0x34>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <RCC_Delay+0x38>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	0a5b      	lsrs	r3, r3, #9
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	fb02 f303 	mul.w	r3, r2, r3
 80021be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021c0:	bf00      	nop
  }
  while (Delay --);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1e5a      	subs	r2, r3, #1
 80021c6:	60fa      	str	r2, [r7, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f9      	bne.n	80021c0 <RCC_Delay+0x1c>
}
 80021cc:	bf00      	nop
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr
 80021d8:	20000008 	.word	0x20000008
 80021dc:	10624dd3 	.word	0x10624dd3

080021e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e041      	b.n	8002276 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d106      	bne.n	800220c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7fe fe88 	bl	8000f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3304      	adds	r3, #4
 800221c:	4619      	mov	r1, r3
 800221e:	4610      	mov	r0, r2
 8002220:	f000 fa56 	bl	80026d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	d001      	beq.n	8002298 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e035      	b.n	8002304 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a16      	ldr	r2, [pc, #88]	; (8002310 <HAL_TIM_Base_Start_IT+0x90>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d009      	beq.n	80022ce <HAL_TIM_Base_Start_IT+0x4e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c2:	d004      	beq.n	80022ce <HAL_TIM_Base_Start_IT+0x4e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a12      	ldr	r2, [pc, #72]	; (8002314 <HAL_TIM_Base_Start_IT+0x94>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d111      	bne.n	80022f2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2b06      	cmp	r3, #6
 80022de:	d010      	beq.n	8002302 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f0:	e007      	b.n	8002302 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f042 0201 	orr.w	r2, r2, #1
 8002300:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40012c00 	.word	0x40012c00
 8002314:	40000400 	.word	0x40000400

08002318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d020      	beq.n	800237c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d01b      	beq.n	800237c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0202 	mvn.w	r2, #2
 800234c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f998 	bl	8002698 <HAL_TIM_IC_CaptureCallback>
 8002368:	e005      	b.n	8002376 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f98b 	bl	8002686 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f99a 	bl	80026aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b00      	cmp	r3, #0
 8002384:	d020      	beq.n	80023c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d01b      	beq.n	80023c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0204 	mvn.w	r2, #4
 8002398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2202      	movs	r2, #2
 800239e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f972 	bl	8002698 <HAL_TIM_IC_CaptureCallback>
 80023b4:	e005      	b.n	80023c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f965 	bl	8002686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f974 	bl	80026aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d020      	beq.n	8002414 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d01b      	beq.n	8002414 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0208 	mvn.w	r2, #8
 80023e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2204      	movs	r2, #4
 80023ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f94c 	bl	8002698 <HAL_TIM_IC_CaptureCallback>
 8002400:	e005      	b.n	800240e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f93f 	bl	8002686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f94e 	bl	80026aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f003 0310 	and.w	r3, r3, #16
 800241a:	2b00      	cmp	r3, #0
 800241c:	d020      	beq.n	8002460 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f003 0310 	and.w	r3, r3, #16
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01b      	beq.n	8002460 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f06f 0210 	mvn.w	r2, #16
 8002430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2208      	movs	r2, #8
 8002436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f926 	bl	8002698 <HAL_TIM_IC_CaptureCallback>
 800244c:	e005      	b.n	800245a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f919 	bl	8002686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f928 	bl	80026aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00c      	beq.n	8002484 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d007      	beq.n	8002484 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0201 	mvn.w	r2, #1
 800247c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fe fca2 	bl	8000dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00c      	beq.n	80024a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002494:	2b00      	cmp	r3, #0
 8002496:	d007      	beq.n	80024a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 fa6f 	bl	8002986 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00c      	beq.n	80024cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d007      	beq.n	80024cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f8f8 	bl	80026bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00c      	beq.n	80024f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f003 0320 	and.w	r3, r3, #32
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d007      	beq.n	80024f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0220 	mvn.w	r2, #32
 80024e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fa42 	bl	8002974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024f0:	bf00      	nop
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_TIM_ConfigClockSource+0x1c>
 8002510:	2302      	movs	r3, #2
 8002512:	e0b4      	b.n	800267e <HAL_TIM_ConfigClockSource+0x186>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800253a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800254c:	d03e      	beq.n	80025cc <HAL_TIM_ConfigClockSource+0xd4>
 800254e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002552:	f200 8087 	bhi.w	8002664 <HAL_TIM_ConfigClockSource+0x16c>
 8002556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800255a:	f000 8086 	beq.w	800266a <HAL_TIM_ConfigClockSource+0x172>
 800255e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002562:	d87f      	bhi.n	8002664 <HAL_TIM_ConfigClockSource+0x16c>
 8002564:	2b70      	cmp	r3, #112	; 0x70
 8002566:	d01a      	beq.n	800259e <HAL_TIM_ConfigClockSource+0xa6>
 8002568:	2b70      	cmp	r3, #112	; 0x70
 800256a:	d87b      	bhi.n	8002664 <HAL_TIM_ConfigClockSource+0x16c>
 800256c:	2b60      	cmp	r3, #96	; 0x60
 800256e:	d050      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x11a>
 8002570:	2b60      	cmp	r3, #96	; 0x60
 8002572:	d877      	bhi.n	8002664 <HAL_TIM_ConfigClockSource+0x16c>
 8002574:	2b50      	cmp	r3, #80	; 0x50
 8002576:	d03c      	beq.n	80025f2 <HAL_TIM_ConfigClockSource+0xfa>
 8002578:	2b50      	cmp	r3, #80	; 0x50
 800257a:	d873      	bhi.n	8002664 <HAL_TIM_ConfigClockSource+0x16c>
 800257c:	2b40      	cmp	r3, #64	; 0x40
 800257e:	d058      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x13a>
 8002580:	2b40      	cmp	r3, #64	; 0x40
 8002582:	d86f      	bhi.n	8002664 <HAL_TIM_ConfigClockSource+0x16c>
 8002584:	2b30      	cmp	r3, #48	; 0x30
 8002586:	d064      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0x15a>
 8002588:	2b30      	cmp	r3, #48	; 0x30
 800258a:	d86b      	bhi.n	8002664 <HAL_TIM_ConfigClockSource+0x16c>
 800258c:	2b20      	cmp	r3, #32
 800258e:	d060      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0x15a>
 8002590:	2b20      	cmp	r3, #32
 8002592:	d867      	bhi.n	8002664 <HAL_TIM_ConfigClockSource+0x16c>
 8002594:	2b00      	cmp	r3, #0
 8002596:	d05c      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0x15a>
 8002598:	2b10      	cmp	r3, #16
 800259a:	d05a      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0x15a>
 800259c:	e062      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	6899      	ldr	r1, [r3, #8]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f000 f96a 	bl	8002886 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	609a      	str	r2, [r3, #8]
      break;
 80025ca:	e04f      	b.n	800266c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	6899      	ldr	r1, [r3, #8]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f000 f953 	bl	8002886 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ee:	609a      	str	r2, [r3, #8]
      break;
 80025f0:	e03c      	b.n	800266c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6859      	ldr	r1, [r3, #4]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	461a      	mov	r2, r3
 8002600:	f000 f8ca 	bl	8002798 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2150      	movs	r1, #80	; 0x50
 800260a:	4618      	mov	r0, r3
 800260c:	f000 f921 	bl	8002852 <TIM_ITRx_SetConfig>
      break;
 8002610:	e02c      	b.n	800266c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6859      	ldr	r1, [r3, #4]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	461a      	mov	r2, r3
 8002620:	f000 f8e8 	bl	80027f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2160      	movs	r1, #96	; 0x60
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f911 	bl	8002852 <TIM_ITRx_SetConfig>
      break;
 8002630:	e01c      	b.n	800266c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	6859      	ldr	r1, [r3, #4]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	461a      	mov	r2, r3
 8002640:	f000 f8aa 	bl	8002798 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2140      	movs	r1, #64	; 0x40
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f901 	bl	8002852 <TIM_ITRx_SetConfig>
      break;
 8002650:	e00c      	b.n	800266c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4619      	mov	r1, r3
 800265c:	4610      	mov	r0, r2
 800265e:	f000 f8f8 	bl	8002852 <TIM_ITRx_SetConfig>
      break;
 8002662:	e003      	b.n	800266c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
      break;
 8002668:	e000      	b.n	800266c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800266a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800267c:	7bfb      	ldrb	r3, [r7, #15]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr

08002698 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr

080026aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
	...

080026d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a2b      	ldr	r2, [pc, #172]	; (8002790 <TIM_Base_SetConfig+0xc0>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d007      	beq.n	80026f8 <TIM_Base_SetConfig+0x28>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ee:	d003      	beq.n	80026f8 <TIM_Base_SetConfig+0x28>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a28      	ldr	r2, [pc, #160]	; (8002794 <TIM_Base_SetConfig+0xc4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d108      	bne.n	800270a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a20      	ldr	r2, [pc, #128]	; (8002790 <TIM_Base_SetConfig+0xc0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d007      	beq.n	8002722 <TIM_Base_SetConfig+0x52>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002718:	d003      	beq.n	8002722 <TIM_Base_SetConfig+0x52>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a1d      	ldr	r2, [pc, #116]	; (8002794 <TIM_Base_SetConfig+0xc4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d108      	bne.n	8002734 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4313      	orrs	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	4313      	orrs	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a0d      	ldr	r2, [pc, #52]	; (8002790 <TIM_Base_SetConfig+0xc0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d103      	bne.n	8002768 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f023 0201 	bic.w	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	611a      	str	r2, [r3, #16]
  }
}
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr
 8002790:	40012c00 	.word	0x40012c00
 8002794:	40000400 	.word	0x40000400

08002798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	f023 0201 	bic.w	r2, r3, #1
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f023 030a 	bic.w	r3, r3, #10
 80027d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	4313      	orrs	r3, r2
 80027dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	621a      	str	r2, [r3, #32]
}
 80027ea:	bf00      	nop
 80027ec:	371c      	adds	r7, #28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	f023 0210 	bic.w	r2, r3, #16
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800281e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	031b      	lsls	r3, r3, #12
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002830:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	4313      	orrs	r3, r2
 800283a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	621a      	str	r2, [r3, #32]
}
 8002848:	bf00      	nop
 800284a:	371c      	adds	r7, #28
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002852:	b480      	push	{r7}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002868:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	f043 0307 	orr.w	r3, r3, #7
 8002874:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	609a      	str	r2, [r3, #8]
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr

08002886 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002886:	b480      	push	{r7}
 8002888:	b087      	sub	sp, #28
 800288a:	af00      	add	r7, sp, #0
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
 8002892:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	021a      	lsls	r2, r3, #8
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	609a      	str	r2, [r3, #8]
}
 80028ba:	bf00      	nop
 80028bc:	371c      	adds	r7, #28
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028d8:	2302      	movs	r3, #2
 80028da:	e041      	b.n	8002960 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002902:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a14      	ldr	r2, [pc, #80]	; (800296c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d009      	beq.n	8002934 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002928:	d004      	beq.n	8002934 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a10      	ldr	r2, [pc, #64]	; (8002970 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d10c      	bne.n	800294e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800293a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	4313      	orrs	r3, r2
 8002944:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40012c00 	.word	0x40012c00
 8002970:	40000400 	.word	0x40000400

08002974 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <__libc_init_array>:
 8002998:	b570      	push	{r4, r5, r6, lr}
 800299a:	2600      	movs	r6, #0
 800299c:	4d0c      	ldr	r5, [pc, #48]	; (80029d0 <__libc_init_array+0x38>)
 800299e:	4c0d      	ldr	r4, [pc, #52]	; (80029d4 <__libc_init_array+0x3c>)
 80029a0:	1b64      	subs	r4, r4, r5
 80029a2:	10a4      	asrs	r4, r4, #2
 80029a4:	42a6      	cmp	r6, r4
 80029a6:	d109      	bne.n	80029bc <__libc_init_array+0x24>
 80029a8:	f000 f822 	bl	80029f0 <_init>
 80029ac:	2600      	movs	r6, #0
 80029ae:	4d0a      	ldr	r5, [pc, #40]	; (80029d8 <__libc_init_array+0x40>)
 80029b0:	4c0a      	ldr	r4, [pc, #40]	; (80029dc <__libc_init_array+0x44>)
 80029b2:	1b64      	subs	r4, r4, r5
 80029b4:	10a4      	asrs	r4, r4, #2
 80029b6:	42a6      	cmp	r6, r4
 80029b8:	d105      	bne.n	80029c6 <__libc_init_array+0x2e>
 80029ba:	bd70      	pop	{r4, r5, r6, pc}
 80029bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80029c0:	4798      	blx	r3
 80029c2:	3601      	adds	r6, #1
 80029c4:	e7ee      	b.n	80029a4 <__libc_init_array+0xc>
 80029c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ca:	4798      	blx	r3
 80029cc:	3601      	adds	r6, #1
 80029ce:	e7f2      	b.n	80029b6 <__libc_init_array+0x1e>
 80029d0:	08002a2c 	.word	0x08002a2c
 80029d4:	08002a2c 	.word	0x08002a2c
 80029d8:	08002a2c 	.word	0x08002a2c
 80029dc:	08002a30 	.word	0x08002a30

080029e0 <memset>:
 80029e0:	4603      	mov	r3, r0
 80029e2:	4402      	add	r2, r0
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d100      	bne.n	80029ea <memset+0xa>
 80029e8:	4770      	bx	lr
 80029ea:	f803 1b01 	strb.w	r1, [r3], #1
 80029ee:	e7f9      	b.n	80029e4 <memset+0x4>

080029f0 <_init>:
 80029f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f2:	bf00      	nop
 80029f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029f6:	bc08      	pop	{r3}
 80029f8:	469e      	mov	lr, r3
 80029fa:	4770      	bx	lr

080029fc <_fini>:
 80029fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fe:	bf00      	nop
 8002a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a02:	bc08      	pop	{r3}
 8002a04:	469e      	mov	lr, r3
 8002a06:	4770      	bx	lr
